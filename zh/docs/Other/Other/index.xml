<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Other on Pxmmmm</title><link>https://pxgh02.github.io/zh/docs/Other/Other/</link><description>Recent content in Other on Pxmmmm</description><generator>Hugo</generator><language>zh</language><atom:link href="https://pxgh02.github.io/zh/docs/Other/Other/index.xml" rel="self" type="application/rss+xml"/><item><title>git</title><link>https://pxgh02.github.io/zh/docs/Other/Other/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/git/</guid><description>&lt;h1 id="基本指令">
 基本指令
 &lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%8c%87%e4%bb%a4">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240829133816554.png" alt="image-20240829133816554" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>add&lt;/code>：将工作区中的更改添加到本地暂存区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>commit&lt;/code>：将本地暂存区中的更改提交到地仓库，创建一个新的提交。 主要完成的内容就是创建一个新的提交，包括暂存区中的所有更改；每个提交都有一个唯一的哈希值，用于在版本历史中标识该提交。提交时，可以提供一条有意义的提交消息来描述更改的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>checkout&lt;/code>：用于在本地仓库中切换分支或恢复历史版本。 主要操作是将Git版本库中的内容拿到工作区。例如回退版本，连续两天提交了版本，第三天的时候，想要将工作区的内容回退到第一天提交的版本，就需要checkout操作回退版本。 或者从一个分支切换到另一个分支，分支的概念看下文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>clone&lt;/code>：克隆远程仓库到本地，创建一个本地仓库的副本。 克隆操作其实就是一个粘贴复制，把远程的仓库完整的拷贝到本地仓库；通常是包含两步：&lt;/p>
&lt;ul>
&lt;li>创建本地仓库：首先，在本地创建一个新的空白目录或指定已存在的目录作为本地仓库。这一步是为了给克隆的项目提供一个位置，用于存储远程仓库的内容和版本历史。&lt;/li>
&lt;li>克隆仓库：使用&lt;code>git clone&lt;/code>命令，将远程仓库的内容复制到本地仓库中。克隆操作会自动将远程仓库的全部历史记录、分支信息和文件复制到新创建的本地仓库目录中，并为远程仓库设置一个别名（默认为“origin”）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>push&lt;/code>：将本地仓库中的更改推送至远程仓库。 将本地的提交推送到远程仓库，更新远程仓库的分支和提交历史。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>pull&lt;/code>：从远程仓库拉取最新更改（相当于&lt;code>fetch&lt;/code> + &lt;code>merge&lt;/code>）。 其实也是两步；更新是从远程仓库（remote repository）到本地仓库（local repository），但实际的合并操作是将更改从本地仓库合并到工作区（working directory）和本地仓库的当前分支。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="创建版本库">
 创建版本库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e7%89%88%e6%9c%ac%e5%ba%93">#&lt;/a>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git 仓库是用于版本控制的一个特殊目录（&lt;code>.git&lt;/code>目录），它保存了项目的完整历史记录和元数据信息&lt;/p>
&lt;p>每当您在项目中添加、修改或删除文件时，Git 都会创建一个新的备份，称为提交（&lt;code>commit&lt;/code>）。提交是代码修改的快照，并包含了作者、时间戳以及相关的元数据信息。&lt;/p>
&lt;p>通过这些提交，Git 可以帮助您追踪项目历史，查看特定版本的代码状态，甚至回滚到之前的某个状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.git/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── branches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config	&lt;span style="color:#75715e">#包含了Git 仓库的配置选项，例如用户名、邮箱等。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── description
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── hooks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── applypatch-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── commit-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── fsmonitor-watchman.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── post-update.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-applypatch.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-commit.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-merge-commit.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-push.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-rebase.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-receive.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── prepare-commit-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── update.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── exclude
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── objects
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── pack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── refs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── heads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── tags
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="分支">
 分支
 &lt;a class="anchor" href="#%e5%88%86%e6%94%af">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240829134404593.png" alt="image-20240829134404593" />&lt;/p></description></item><item><title>makefile</title><link>https://pxgh02.github.io/zh/docs/Other/Other/makefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/makefile/</guid><description>&lt;h1 id="makefile">
 Makefile
 &lt;a class="anchor" href="#makefile">#&lt;/a>
&lt;/h1>
&lt;p>&lt;strong>xxx.mk&lt;/strong> 文件或者 &lt;strong>Makefile&lt;/strong> 都统称为 Makefile 脚本文件&lt;/p>
&lt;p>功能：指导 Make 软件控制 arm-gcc 等工具链去编译工程文件最终得到可执行文件&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240831224125900.png" alt="image-20240831224125900" />&lt;/p>
&lt;h2 id="基础规则">
 基础规则
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e8%a7%84%e5%88%99">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>目标：依赖条件
	命令	
&lt;/code>&lt;/pre>&lt;p>&lt;strong>拓展&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#根据工作原理，如果只改变其中一个文件，就只会编译这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">hello&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp printhello.cpp factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	g++ -o hello main.cpp printhello.cpp factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#使用变量CXX、TARGET 、OBJ，同时采用不同的依赖分别编译
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#根据工作原理，如果只改变其中一个文件，就只会编译这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OBJ &lt;span style="color:#f92672">=&lt;/span> main.o printhello.o factorial.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">##.mk-V2: ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#makefile 默认第一个目标文件为终极目标，生成就跑路，这时候可以用 ALL 来指定终极目标。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OBJ &lt;span style="color:#f92672">=&lt;/span> main.o printhello.o factorial.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V3: wildcard &amp;amp; patsubst 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./*.c&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#75715e">#匹配当前工作目录下的所有.c 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.c, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># 将参数 3 中，包含参数 1 的部分，替换为参数 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">###
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V4: clean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./*.c&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#75715e">#匹配当前工作目录下的所有.c 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.c, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># 将参数 3 中，包含参数 1 的部分，替换为参数 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">###
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#75715e"># “-” ：作用是，删除不存在文件时，不报错。顺序执行结束。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V5: 三个自动变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">$@&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示规则中的目标。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$^&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示所有依赖条件。组成一个列表，以空格隔开，如果这个列表中有重复项，则去重
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">$&amp;lt;&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示第一个依赖条件。如果将该变量应用在模式规则中，它可将依赖条件列表中的依赖依次取出，套用模式规则。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V6: 模式规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#要添加一个.cpp文件，不需要在 makefile 里面增加这个文件的 -o 的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">%.o &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V7: 静态模式规则？？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#使用静态模式规则，就是指定模式规则给谁用，这里指定模式规则给 obj 用，以后文件多了，文件集合会有很多个，就需要指定哪个文件集合用什么规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(obj) &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.o : %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V8: 伪目标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#当前文件夹下有 ALL 文件或者 clean 文件时，会导致 makefile 瘫痪，此时使用.PHONY: clean ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> clean ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(obj) &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.o : %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V9: 文件分类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#将上述 .cpp 文件都放到 src 目录中，.h 文件都放在 inc 目录中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./src/*.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst ./src/%.cpp, ./obj/%.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inc_path &lt;span style="color:#f92672">=&lt;/span> ./inc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXXFLAGS &lt;span style="color:#f92672">=&lt;/span> -Wall -c -I&lt;span style="color:#66d9ef">$(&lt;/span>inc_path&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">./obj/%.o &lt;/span>&lt;span style="color:#f92672">:&lt;/span> ./src/%.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>CXXFLAGS&lt;span style="color:#66d9ef">)&lt;/span> $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> clean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="make-的参数">
 make 的参数
 &lt;a class="anchor" href="#make-%e7%9a%84%e5%8f%82%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>-n：模拟执行 make、 make clean 命令。仅输出执行过程中的命令序列，但并不执行。&lt;/li>
&lt;li>-f：指定文件执行 make 命令。 xxxx.mk&lt;/li>
&lt;li>-j：可以并行构建多个目标，加快构建速度&lt;/li>
&lt;li>&lt;strong>-s&lt;/strong>‌ 或 ‌**&amp;ndash;silent&lt;strong>‌ 或 ‌&lt;/strong>&amp;ndash;quiet**‌：不显示命令。&lt;/li>
&lt;/ul>
&lt;h2 id="makefile-语法">
 Makefile 语法
 &lt;a class="anchor" href="#makefile-%e8%af%ad%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>使用echo进行printf&lt;/p></description></item><item><title>writeing</title><link>https://pxgh02.github.io/zh/docs/Other/Other/Writing-PPT-Presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Writing-PPT-Presentation/</guid><description>&lt;h1 id="main-points">
 Main Points
 &lt;a class="anchor" href="#main-points">#&lt;/a>
&lt;/h1>
&lt;ol>
&lt;li>某问题对推动科学发展或工程应用很重要，可通过多篇引用体现；&lt;/li>
&lt;li>现有方法有A、B、C，但它们存在一定缺点；&lt;/li>
&lt;li>本文提出一个新方法X。X是否第一次被提出？带来哪些影响？有无惊人结果？&lt;/li>
&lt;li>和现有方法相比，X在理论和实验中有更强的优势；&lt;/li>
&lt;li>X存在某弱点，我们计划在未来工作中如何改进。&lt;/li>
&lt;/ol>
&lt;h1 id="paper-structure">
 Paper Structure
 &lt;a class="anchor" href="#paper-structure">#&lt;/a>
&lt;/h1>
&lt;h2 id="title">
 Title
 &lt;a class="anchor" href="#title">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>⽤用⼀一句话概括你所做的⼯工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>考虑搜索引擎的影响，包含关键词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以适当地别出⼼心裁&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729171432560.png" alt="image-20240729171432560" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="abstract">
 Abstract
 &lt;a class="anchor" href="#abstract">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>概括&lt;/strong>[Main Points](#Main Points)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用语要简单，让外行能看懂&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免技术术语、数学公式、和技术细节&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不需要标注&lt;strong>引用&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要对工作的新颖性和影响力进行强调；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接在**”In this paper“**后面的一句最重要，它是对全文主要贡献的概括。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常用结构举例：&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729171808437.png" alt="image-20240729171808437" />&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729173951233.png" alt="Nature论文摘要模板" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>更详细地概括[Main Points](#Main Points)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>要点是充分论证你所做⼯工作的必要性和重要性， 要让审稿⼈人认同并迫不及待想往下看&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免技术术语、数学公式、和技术细节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应假定读者不了解本文研究的具体问题，且不知道该问题的相关工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>介绍为什么这是个重要的研究问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工作的创新点(3个及以上)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后一段通常是介绍论文的结构安排，举例&lt;/p>
&lt;pre tabindex="0">&lt;code>The rest of the paper is organized as follows. In Section 2, we discuss previous work on ... In Section 3, we describe ... In Section 4, we show ... In Section 5, we conclude the whole paper.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>突出本文贡献，举例：&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Algorithms/</guid><description>&lt;h1 id="整数规划">
 整数规划
 &lt;a class="anchor" href="#%e6%95%b4%e6%95%b0%e8%a7%84%e5%88%92">#&lt;/a>
&lt;/h1>
&lt;h2 id="举例">
 举例
 &lt;a class="anchor" href="#%e4%b8%be%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241029145234771.png" alt="image-20241029145234771" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241029145359528.png" alt="image-20241029145359528" />&lt;/p>
&lt;h1 id="combinatorial-optimization">
 Combinatorial Optimization
 &lt;a class="anchor" href="#combinatorial-optimization">#&lt;/a>
&lt;/h1>
&lt;p>组合优化问题(COP)&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018112358445.png" alt="image-20241018112358445" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018112605864.png" alt="image-20241018112605864" />&lt;/p>
&lt;h2 id="精确方法和近似方法">
 精确方法和近似方法
 &lt;a class="anchor" href="#%e7%b2%be%e7%a1%ae%e6%96%b9%e6%b3%95%e5%92%8c%e8%bf%91%e4%bc%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113452893.png" alt="image-20241018113452893" />&lt;/p>
&lt;h2 id="常见相关场景问题">
 常见相关场景/问题
 &lt;a class="anchor" href="#%e5%b8%b8%e8%a7%81%e7%9b%b8%e5%85%b3%e5%9c%ba%e6%99%af%e9%97%ae%e9%a2%98">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>TSP&lt;/p>
&lt;p>给定一系列城市和每对城市之间的距离，求解访问每座城市一次并回到起始城市的最短回路&lt;/p>
&lt;/li>
&lt;li>
&lt;p>VRP&lt;/p>
&lt;p>给定一组客户点、车辆容量、车辆数量、起始点和终点，目标是找到使得所有客户点都被访问一次的最短路径方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MVC(最小顶点覆盖问题)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MDS(最小支配集)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MIS(最大独立集)&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018164450384.png" alt="image-20241018164450384" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>背包问题&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018132543551.png" alt="image-20241018132543551" />&lt;/p>
&lt;h2 id="heuristic-algorithm">
 Heuristic algorithm
 &lt;a class="anchor" href="#heuristic-algorithm">#&lt;/a>
&lt;/h2>
&lt;h3 id="sa">
 SA
 &lt;a class="anchor" href="#sa">#&lt;/a>
&lt;/h3>
&lt;p>Simulated Annealing&lt;/p>
&lt;h3 id="ga">
 GA
 &lt;a class="anchor" href="#ga">#&lt;/a>
&lt;/h3>
&lt;p>Genetic Algorithm&lt;/p>
&lt;h3 id="ge">
 GE
 &lt;a class="anchor" href="#ge">#&lt;/a>
&lt;/h3>
&lt;p>Grammatical Evolution&lt;/p>
&lt;h2 id="基于nn和dl的方法">
 基于NN和DL的方法
 &lt;a class="anchor" href="#%e5%9f%ba%e4%ba%8enn%e5%92%8cdl%e7%9a%84%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="分类">
 分类
 &lt;a class="anchor" href="#%e5%88%86%e7%b1%bb">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018122106575.png" alt="image-20241018122106575" />&lt;/p>
&lt;h3 id="特点">
 特点
 &lt;a class="anchor" href="#%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;h4 id="优点">
 优点
 &lt;a class="anchor" href="#%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113533415.png" alt="image-20241018113533415" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113547534.png" alt="image-20241018113547534" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018115539708.png" alt="image-20241018115539708" />&lt;/p>
&lt;h4 id="缺点">
 缺点
 &lt;a class="anchor" href="#%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018115428936.png" alt="image-20241018115428936" />&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Hardware/</guid><description>&lt;h1 id="综述">
 综述
 &lt;a class="anchor" href="#%e7%bb%bc%e8%bf%b0">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232132033.png" alt="image-20250205232132033" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232142292.png" alt="image-20250205232142292" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235817697.png" alt="image-20250205235817697" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235828836.png" alt="image-20250205235828836" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235842773.png" alt="image-20250205235842773" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235955485.png" alt="image-20250205235955485" />&lt;/p>
&lt;h1 id="cpu">
 CPU
 &lt;a class="anchor" href="#cpu">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232228476.png" alt="image-20250205232228476" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232544143.png" alt="image-20250205232544143" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241024104223498.png" alt="image-20241024104223498" />&lt;/p>
&lt;h2 id="cpu类型">
 CPU类型
 &lt;a class="anchor" href="#cpu%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232814720.png" alt="image-20250205232814720" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250225100046558.png" alt="image-20250225100046558" />&lt;/p>
&lt;p>&lt;strong>复杂指令集(CISC)&lt;/strong>: x86, Zen&lt;/p>
&lt;p>&lt;strong>精简指令集(RISC)&lt;/strong>：ARM，MIPS, PowerPC&lt;/p>
&lt;ul>
&lt;li>针对性更强，可以根据不同的需求进行专门的优化，能效更高&lt;/li>
&lt;li>调用速度快&lt;/li>
&lt;li>服务器上往往使用RISC&lt;/li>
&lt;li>服务器CPU往往应用了最先进的工艺和技术，并且配备了一二三级缓存，运行能力更强，服务器CPU很早就用上了3级缓存，普通cpu是近几年才用上了缓存技术&lt;/li>
&lt;/ul>
&lt;p>与 CISC 相比，RISC 方法有几个优点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>简化硬件实现&lt;/strong>：它简化了处理器的硬件实现，因为需要解码和执行的指令更少。这可加快执行时间，降低功耗。&lt;/li>
&lt;li>&lt;strong>更高的指令级并行性&lt;/strong>：RISC 处理器通常具有更高的指令级并行性，可同时执行多条指令，从而进一步提高性能。&lt;/li>
&lt;li>&lt;strong>简易性&lt;/strong>：RISC 指令集的简易性使得开发可为处理器生成高效代码的编译器和其他软件工具变得更加容易。&lt;/li>
&lt;/ol>
&lt;h3 id="arm">
 ARM
 &lt;a class="anchor" href="#arm">#&lt;/a>
&lt;/h3>
&lt;p>是一个**32位精简指令集（RISC）**处理器架构&lt;/p>
&lt;p>优势：&lt;strong>价格低；能耗低&lt;/strong>&lt;/p>
&lt;p>由于&lt;strong>节能&lt;/strong>的特点，ARM处理器非常适用于行动通讯领域，符合其主要设计目标为低耗电的特性。&lt;/p>
&lt;p>其广泛地使用在许多
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%b5%8c%e5%85%a5%e5%bc%8f%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1&amp;amp;zhida_source=entity">嵌入式系统设计&lt;/a>。&lt;/p>
&lt;h3 id="x86atom">
 x86/Atom
 &lt;a class="anchor" href="#x86atom">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>x86&lt;/code>是英代尔Intel首先开发制造的一种
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84&amp;amp;zhida_source=entity">微处理器体系结构&lt;/a>的泛称。
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=x86%e6%9e%b6%e6%9e%84&amp;amp;zhida_source=entity">x86架构&lt;/a>是重要地&lt;strong>可变指令长度&lt;/strong>的CISC（复杂指令集电脑，Complex Instruction Set Computer）。&lt;/p>
&lt;p>Intel &lt;code>Atom&lt;/code>（中文：凌动，开发代号：Silverthorne）是Intel的一个
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e8%b6%85%e4%bd%8e%e7%94%b5%e5%8e%8b%e5%a4%84%e7%90%86%e5%99%a8&amp;amp;zhida_source=entity">超低电压处理器&lt;/a>系列&lt;/p>
&lt;h3 id="mips">
 MIPS
 &lt;a class="anchor" href="#mips">#&lt;/a>
&lt;/h3>
&lt;p>一种
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=RISC%e5%a4%84%e7%90%86%e5%99%a8&amp;amp;zhida_source=entity">RISC处理器&lt;/a>（精简指令集）&lt;/p>
&lt;h3 id="risc-v">
 RISC-V
 &lt;a class="anchor" href="#risc-v">#&lt;/a>
&lt;/h3>
&lt;p>&lt;em>RISC-V（读作 risk-five）架构是一种开源指令集架构（ISA），近年来因其灵活性、模块化和可扩展性而备受关注&lt;/em>&lt;/p>
&lt;p>模块化是指将 ISA 划分为不同的独立组件，这些组件可以通过各种方式组合在一起，从而创建一个定制的处理器。另一方面，可扩展性是指在不破坏现有功能的情况下，向 ISA 添加新指令、功能或扩展的能力。&lt;/p>
&lt;h4 id="历史">
 历史
 &lt;a class="anchor" href="#%e5%8e%86%e5%8f%b2">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250225095526450.png" alt="image-20250225095526450" />&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/linux/</guid><description>&lt;h1 id="sh脚本">
 .sh脚本
 &lt;a class="anchor" href="#sh%e8%84%9a%e6%9c%ac">#&lt;/a>
&lt;/h1>
&lt;h2 id="shebang开头特殊行">
 shebang开头特殊行
 &lt;a class="anchor" href="#shebang%e5%bc%80%e5%a4%b4%e7%89%b9%e6%ae%8a%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;p>这行告诉系统应该使用哪个解释器来执行脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#!&lt;/code> 是shebang的标识符，后面跟着解释器的路径&lt;/p>
&lt;p>对于Python脚本&lt;code>#!/usr/bin/env python3&lt;/code>.使用 &lt;code>/usr/bin/env&lt;/code> 是为了确保系统能够在任何安装了Python的位置找到Python解释器，而不是硬编码路径。&lt;/p>
&lt;h2 id="设置参数">
 设置参数
 &lt;a class="anchor" href="#%e8%ae%be%e7%bd%ae%e5%8f%82%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>verisim&lt;span style="color:#f92672">=&lt;/span>/home/public/software/verisim/bin/verisim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;--case&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		Case&lt;span style="color:#f92672">=&lt;/span>$2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		echo &lt;span style="color:#e6db74">&amp;#34;Error! No case at provided after --case&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	echo &lt;span style="color:#e6db74">&amp;#34;run without appoint testcase&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_2000_2000_100.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_1000_1000_50.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_500_500_50.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_200_200_20.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_100_100_20.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_40_40_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_30_30_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_20_20_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Case&lt;span style="color:#f92672">=&lt;/span>../testcase/gate_20_20_5.v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export Case
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#设为环境变量，这样就可以在代码里面获得，eg: char *env_name = getenv(&amp;#34;Case&amp;#34;); //get case from env_var&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#以下是关于这个项目的编译的相关指令，无关&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CFile&lt;span style="color:#f92672">=&lt;/span>setUpSystemFunc_verisim.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PliMap&lt;span style="color:#f92672">=&lt;/span>../code/systf.tab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf verisim_history.db verisim.env verisim.db verisim_work verisim.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">${&lt;/span>verisim&lt;span style="color:#e6db74">}&lt;/span> +acc+c &lt;span style="color:#e6db74">${&lt;/span>Case&lt;span style="color:#e6db74">}&lt;/span> -P &lt;span style="color:#e6db74">${&lt;/span>PliMap&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>CFile&lt;span style="color:#e6db74">}&lt;/span> -no-mold
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf verisim_history.zdb verisim.env verisim.zdb verisim_work verisim.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#eg:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./run.sh --case ../testcase/gate_100_100_20.v 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="输出重定向">
 输出重定向
 &lt;a class="anchor" href="#%e8%be%93%e5%87%ba%e9%87%8d%e5%ae%9a%e5%90%91">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;blockquote>
&lt;/blockquote>&lt;/blockquote>
&lt;h2 id="循环">
 循环
 &lt;a class="anchor" href="#%e5%be%aa%e7%8e%af">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>IVERILOG_PATH/bin:&lt;span style="color:#e6db74">${&lt;/span>PATH&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VPI&lt;span style="color:#f92672">=&lt;/span>myvpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个包含所有测试案例的数组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cases&lt;span style="color:#f92672">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/test.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_20_20_5.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_20_20_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_30_30_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_40_40_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_100_100_20.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_200_200_20.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_500_500_50.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_1000_1000_50.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 循环遍历所有的测试案例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> Case in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>cases[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Running case: &lt;/span>$Case&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 清理之前的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf *.vvp *.vpi obj_dir *.o myvpi.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 触摸VPI的C文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 编译Verilog文件和VPI文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iverilog &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$Case&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -o testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iverilog-vpi -L. &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c ./setUpSystemFunc_iverilog.cpp ./loopchecker.h -o testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 运行模拟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vvp -M. -m &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span> testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 清理生成的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf *.vvp *.vpi obj_dir *.o &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;All cases have been run.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="提升权限直接运行">
 提升权限直接运行
 &lt;a class="anchor" href="#%e6%8f%90%e5%8d%87%e6%9d%83%e9%99%90%e7%9b%b4%e6%8e%a5%e8%bf%90%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看脚本权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls -l yourscript.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#改变权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod +x yourscript.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">755&lt;/span> yourscript.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7 代表 rwx（读、写、执行）
6 代表 rw-（读、写）
5 代表 r-x（读、执行）
4 代表 r&amp;ndash;（读）&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Literature/</guid><description>&lt;h1 id="喜剧">
 喜剧
 &lt;a class="anchor" href="#%e5%96%9c%e5%89%a7">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>夏洛特烦恼&lt;/li>
&lt;li>年会不能停&lt;/li>
&lt;li>三傻大闹宝莱坞&lt;/li>
&lt;/ul>
&lt;h2 id="无厘头">
 无厘头
 &lt;a class="anchor" href="#%e6%97%a0%e5%8e%98%e5%a4%b4">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>欧洲性旅行&lt;/li>
&lt;/ul>
&lt;h2 id="情景喜剧">
 情景喜剧
 &lt;a class="anchor" href="#%e6%83%85%e6%99%af%e5%96%9c%e5%89%a7">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>生活大爆炸&lt;/li>
&lt;li>爱情公寓(1-4s)&lt;/li>
&lt;li>老友记&lt;/li>
&lt;li>请回答1988&lt;/li>
&lt;li>是，大臣&lt;/li>
&lt;li>是，首相&lt;/li>
&lt;li>笑傲江湖&lt;/li>
&lt;li>龙门镖局&lt;/li>
&lt;li>IT狂人&lt;/li>
&lt;/ul>
&lt;h1 id="科幻">
 科幻
 &lt;a class="anchor" href="#%e7%a7%91%e5%b9%bb">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>星际穿越&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三体123&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;li>
&lt;p>彗星来的那一夜?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Moon&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安德的游戏&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h1 id="文艺剧情">
 文艺/剧情
 &lt;a class="anchor" href="#%e6%96%87%e8%89%ba%e5%89%a7%e6%83%85">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>走走停停&lt;/li>
&lt;li>万箭穿心&lt;/li>
&lt;li>天下无贼&lt;/li>
&lt;li>漫长的季节&lt;/li>
&lt;li>小巷人家&lt;/li>
&lt;li>心灵捕手&lt;/li>
&lt;li>时空恋旅人&lt;/li>
&lt;li>爆裂鼓手&lt;/li>
&lt;li>大佛普拉斯&lt;/li>
&lt;li>同学麦娜丝&lt;/li>
&lt;li>搏击俱乐部&lt;/li>
&lt;li>风平浪静&lt;/li>
&lt;li>错会半生&lt;/li>
&lt;li>那山那人那狗&lt;/li>
&lt;li>大象席地而坐&lt;/li>
&lt;li>心灵捕手&lt;/li>
&lt;li>破·地狱（The Last Dance）&lt;/li>
&lt;li>超市夜未眠&lt;/li>
&lt;li>何以为家&lt;/li>
&lt;/ul>
&lt;h1 id="悬疑">
 悬疑
 &lt;a class="anchor" href="#%e6%82%ac%e7%96%91">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>福尔摩斯探案集&lt;/li>
&lt;li>神探夏洛克&lt;/li>
&lt;li>看不见的客人&lt;/li>
&lt;li>消失的爱人&lt;/li>
&lt;li>利刃出鞘&lt;/li>
&lt;li>因果报应&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h1 id="历史社会生活">
 历史/社会/生活
 &lt;a class="anchor" href="#%e5%8e%86%e5%8f%b2%e7%a4%be%e4%bc%9a%e7%94%9f%e6%b4%bb">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>霸王别姬&lt;/li>
&lt;li>泰坦尼克号&lt;/li>
&lt;li>红高粱&lt;/li>
&lt;li>我不是药神&lt;/li>
&lt;li>茶馆&lt;/li>
&lt;li>活着&lt;/li>
&lt;li>山河故人&lt;/li>
&lt;/ul></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/network/</guid><description>&lt;h1 id="基础知识">
 基础知识
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="ip">
 IP
 &lt;a class="anchor" href="#ip">#&lt;/a>
&lt;/h2>
&lt;p>IP地址可唯一标识 IP 网络中的每台设备
每台主机（计算机、网络设备、外围设备）必须具有唯一的地址
网络地址 + 主机地址&lt;/p>
&lt;h2 id="子网掩码">
 子网掩码
 &lt;a class="anchor" href="#%e5%ad%90%e7%bd%91%e6%8e%a9%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;p>区分主机ID和网络ID
举例：当子网掩码=255.255.255.0时：
192.168.100.168（IP地址） = 192.168.1.0 (网络地址) + 0.0.0.168（主机地址）
用网线直接连接 或 通过 HUB（集线器）、普通交换机链接的计算机必须处于同一网络(网络地址) 并且主机地址必须不一样 才能通信。&lt;/p>
&lt;h3 id="如何判断两个主机在同一网段">
 如何判断两个主机在同一网段
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e4%b8%a4%e4%b8%aa%e4%b8%bb%e6%9c%ba%e5%9c%a8%e5%90%8c%e4%b8%80%e7%bd%91%e6%ae%b5">#&lt;/a>
&lt;/h3>
&lt;p>假设有两个主机A和B，它们的IP地址和子网掩码如下：&lt;/p>
&lt;p>主机A的IP地址：192.168.1.2&lt;/p>
&lt;p>主机A的子网掩码：255.255.255.0&lt;/p>
&lt;p>主机B的IP地址：192.168.1.5&lt;/p>
&lt;p>主机B的子网掩码：255.255.255.0&lt;/p>
&lt;p>步骤1：应用子网掩码
对于主机A：&lt;/p>
&lt;p>IP地址：192.168.1.2 转换为二进制是 11000000.10101000.00000001.00000010
子网掩码：255.255.255.0 转换为二进制是 11111111.11111111.11111111.00000000
进行AND运算：&lt;/p>
&lt;p>11000000.10101000.00000001.00000010 (IP地址)
11111111.11111111.11111111.00000000 (子网掩码)
11000000.10101000.00000001.00000000 (网络地址)
转换回十进制，网络地址为：192.168.1.0&lt;/p>
&lt;p>对于主机B：&lt;/p>
&lt;p>IP地址：192.168.1.5 转换为二进制是 11000000.10101000.00000001.00000101
子网掩码：255.255.255.0 转换为二进制是 11111111.11111111.11111111.00000000
进行AND运算：&lt;/p>
&lt;p>11000000.10101000.00000001.00000101 (IP地址)
11111111.11111111.11111111.00000000 (子网掩码)
11000000.10101000.00000001.00000000 (网络地址)
转换回十进制，网络地址为：192.168.1.0&lt;/p>
&lt;p>步骤2：比较网络地址
由于两个主机的网络地址都是192.168.1.0，因此它们在同一网段。&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Program/</guid><description>&lt;h1 id="cc">
 C/C++
 &lt;a class="anchor" href="#cc">#&lt;/a>
&lt;/h1>
&lt;h2 id="c-标准">
 c++ 标准
 &lt;a class="anchor" href="#c-%e6%a0%87%e5%87%86">#&lt;/a>
&lt;/h2>
&lt;p>以下是自 &lt;strong>C++11&lt;/strong> 以来各版本 C++ 标准的主要特点和重要改动的总结(AI 生成)：&lt;/p>
&lt;hr>
&lt;h3 id="1-c112011-年">
 &lt;strong>1. C++11（2011 年）&lt;/strong>
 &lt;a class="anchor" href="#1-c112011-%e5%b9%b4">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>现代 C++ 的里程碑&lt;/strong>，引入大量革命性特性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>核心语言&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>auto&lt;/code> &lt;strong>类型推导&lt;/strong>：自动推断变量类型（&lt;code>auto x = 42;&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>右值引用&lt;/strong>（&lt;code>&amp;amp;&amp;amp;&lt;/code>）和 &lt;strong>移动语义&lt;/strong>（&lt;code>std::move&lt;/code>）：优化资源管理，减少拷贝开销。&lt;/li>
&lt;li>&lt;strong>范围 for 循环&lt;/strong>：简化容器遍历（&lt;code>for (auto&amp;amp; x : vec) { ... }&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>Lambda 表达式&lt;/strong>：支持匿名函数（&lt;code>auto f = [](int x) { return x*2; };&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>强类型枚举&lt;/strong>（&lt;code>enum class&lt;/code>）：避免传统枚举的命名冲突。&lt;/li>
&lt;li>&lt;code>nullptr&lt;/code>：替代 &lt;code>NULL&lt;/code>，明确表示空指针。&lt;/li>
&lt;li>&lt;strong>可变参数模板&lt;/strong>（Variadic Templates）：支持任意数量模板参数。&lt;/li>
&lt;li>&lt;code>constexpr&lt;/code>：编译时计算常量表达式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>标准库&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>智能指针&lt;/strong>：&lt;code>std::unique_ptr&lt;/code>, &lt;code>std::shared_ptr&lt;/code>, &lt;code>std::weak_ptr&lt;/code>（自动内存管理）。&lt;/li>
&lt;li>&lt;strong>多线程支持&lt;/strong>：&lt;code>std::thread&lt;/code>, &lt;code>std::mutex&lt;/code>, &lt;code>std::future&lt;/code> 等。&lt;/li>
&lt;li>&lt;strong>正则表达式库&lt;/strong>（&lt;code>&amp;lt;regex&amp;gt;&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>哈希容器&lt;/strong>：&lt;code>std::unordered_map&lt;/code>, &lt;code>std::unordered_set&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-c142014-年">
 &lt;strong>2. C++14（2014 年）&lt;/strong>
 &lt;a class="anchor" href="#2-c142014-%e5%b9%b4">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>C++11 的补充版本&lt;/strong>，优化语言细节：&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/software/</guid><description>&lt;h1 id="pimpl">
 PIMPL
 &lt;a class="anchor" href="#pimpl">#&lt;/a>
&lt;/h1>
&lt;p>(Pointer to Implementation) 设计模式&lt;/p>
&lt;h1 id="opendb">
 OpenDB
 &lt;a class="anchor" href="#opendb">#&lt;/a>
&lt;/h1>
&lt;h1 id="swig">
 SWIG
 &lt;a class="anchor" href="#swig">#&lt;/a>
&lt;/h1></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Tools/</guid><description>&lt;h1 id="wsl">
 WSL
 &lt;a class="anchor" href="#wsl">#&lt;/a>
&lt;/h1>
&lt;h2 id="cmd">
 cmd
 &lt;a class="anchor" href="#cmd">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl -l -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --shutdown	&lt;span style="color:#75715e">#关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --list --verbose &lt;span style="color:#75715e"># 查看已安装的发行版、WSL 版本信息和当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --export Ubuntu-22.04 e:&lt;span style="color:#ae81ff">\U&lt;/span>buntu-22.04.tar#导出
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --unregister Ubuntu-22.04 &lt;span style="color:#75715e">#注销并卸载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --import Ubuntu-22.04 E:&lt;span style="color:#ae81ff">\u&lt;/span>buntu2204 E:&lt;span style="color:#ae81ff">\U&lt;/span>buntu-22.04.tar#导入
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="环境配置">
 环境配置
 &lt;a class="anchor" href="#%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>windows 设置打开： &lt;strong>适用于 Linux 的 Windows 子系统&lt;/strong> 和 &lt;strong>虚拟机平台&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240915093843416.png" alt="image-20240915093843416" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240915093856560.png" alt="image-20240915093856560" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Linux 内核更新包：https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl --list --verbose &lt;span style="color:#75715e"># 查看已安装的发行版、WSL 版本信息和当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;a href="https://www.sysgeek.cn/install-wsl-2-windows/">Windows 11：WSL 2 安装和管理指南，3 种方法任你选 - 系统极客 (sysgeek.cn)&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://blog.csdn.net/cn_ljr/article/details/132047516">Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移_windows 11 wsl 修改安装位置-CSDN 博客&lt;/a>&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/window/</guid><description>&lt;h1 id="vscode">
 vscode
 &lt;a class="anchor" href="#vscode">#&lt;/a>
&lt;/h1>
&lt;h2 id="remote-ssh">
 remote-ssh
 &lt;a class="anchor" href="#remote-ssh">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>Host ISMC_Server_106
 HostName your.ip
 Port 22
 User pengxuan
&lt;/code>&lt;/pre>&lt;h1 id="系统重装">
 系统重装
 &lt;a class="anchor" href="#%e7%b3%bb%e7%bb%9f%e9%87%8d%e8%a3%85">#&lt;/a>
&lt;/h1>
&lt;h2 id="下载iso">
 下载ISO
 &lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bdiso">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://techpp.com/2024/09/02/windows-11-iso-download/">Windows 11 ISO Download – Official Direct Download Links - TechPP&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://next.itellyou.cn/Original/">原版软件 (itellyou.cn)&lt;/a>&lt;/p>
&lt;h2 id="制作pe">
 制作PE
 &lt;a class="anchor" href="#%e5%88%b6%e4%bd%9cpe">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://www.bilibili.com/video/BV1Ez421R7iY/?spm_id_from=333.337.search-card.all.click">纯净无广告，又强又趁手的维护工具，FirPE使用和DIY指南_哔哩哔哩_bilibili&lt;/a>&lt;/p>
&lt;p>FirPE:默认,全新制作&lt;/p>
&lt;h2 id="跳过联网">
 跳过联网
 &lt;a class="anchor" href="#%e8%b7%b3%e8%bf%87%e8%81%94%e7%bd%91">#&lt;/a>
&lt;/h2>
&lt;p>（Fn+）Shift+F10快捷键调出命令提示符窗口&lt;/p>
&lt;p>输入：OOBE\BYPASSNRO&lt;/p>
&lt;h2 id="windows激活office激活">
 windows激活&amp;amp;office激活
 &lt;a class="anchor" href="#windows%e6%bf%80%e6%b4%bboffice%e6%bf%80%e6%b4%bb">#&lt;/a>
&lt;/h2>
&lt;p>power shell 下打开输入&lt;code>irm win.zyqq.top | iex&lt;/code>,然后根据提示&lt;/p>
&lt;h2 id="初始化设置">
 初始化设置
 &lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e8%ae%be%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;p>使用dism++&lt;/p>
&lt;h2 id="系统备份及还原方法">
 系统备份及还原方法
 &lt;a class="anchor" href="#%e7%b3%bb%e7%bb%9f%e5%a4%87%e4%bb%bd%e5%8f%8a%e8%bf%98%e5%8e%9f%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://chongzhuang.163987.com/faq/17160.html">win11一键备份还原系统方法_系统之家一键重装系统官网 (163987.com)&lt;/a>&lt;/p>
&lt;h2 id="成为管理员">
 成为管理员
 &lt;a class="anchor" href="#%e6%88%90%e4%b8%ba%e7%ae%a1%e7%90%86%e5%91%98">#&lt;/a>
&lt;/h2>
&lt;h2 id="无法打开windowapps">
 无法打开WindowApps
 &lt;a class="anchor" href="#%e6%97%a0%e6%b3%95%e6%89%93%e5%bc%80windowapps">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://blog.csdn.net/VLOKL/article/details/140148337">【快速解决】WindowsApps拒绝访问的问题_windowsapps文件夹拒绝访问-CSDN博客&lt;/a>&lt;/p>
&lt;h2 id="win11家庭版升级为专业版">
 win11家庭版升级为专业版
 &lt;a class="anchor" href="#win11%e5%ae%b6%e5%ba%ad%e7%89%88%e5%8d%87%e7%ba%a7%e4%b8%ba%e4%b8%93%e4%b8%9a%e7%89%88">#&lt;/a>
&lt;/h2>
&lt;h1 id="cmd指令">
 cmd指令
 &lt;a class="anchor" href="#cmd%e6%8c%87%e4%bb%a4">#&lt;/a>
&lt;/h1>
&lt;pre tabindex="0">&lt;code>D: #进入d盘
cd ..
dir
&lt;/code>&lt;/pre></description></item></channel></rss>