<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>介绍 on Pxmmmm</title><link>https://pxgh02.github.io/zh/</link><description>Recent content in 介绍 on Pxmmmm</description><generator>Hugo</generator><language>zh</language><atom:link href="https://pxgh02.github.io/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>bs24</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Routing/global-router/congestion/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%A2%84%E8%B7%AF%E7%94%B1%E6%8B%A5%E5%A1%9E%E9%A2%84%E6%B5%8B%E7%A0%94%E7%A9%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Routing/global-router/congestion/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%A2%84%E8%B7%AF%E7%94%B1%E6%8B%A5%E5%A1%9E%E9%A2%84%E6%B5%8B%E7%A0%94%E7%A9%B6/</guid><description>&lt;p>基于图神经网络的EDA预路由拥塞预测研究&lt;/p>
&lt;p>课题描述:&lt;/p>
&lt;p>​	近年来随着数字芯片使用越来越小的工艺制程和芯片内包含越来越多的逻辑单元，使其设计更新迭代优化的难度越来越大。由于数字后端中的布局(Placement)布线(路由, Route)流程属于是NP-Hard的算法优化问题，EDA(Electronic Design Automation)工具在这一阶段往往及其费时，导致更长的物理设计周期。&lt;/p>
&lt;p>​	在数字电路优化过程中，布线拥塞是用于物理设计过程迭代优化的重要指标。某些区域的布线密度过高，导致无法继续进行有效的布线，进而导致时序与设计规则违例等问题。为此，许多现代综合与布局工具利用拥塞数据，以尽量减少最终物理设计中的拥塞影响。通过布线的拥塞数据，布局布线工具将相应地优化相关的可移动单元位置，以减少线长度、拥塞和违例，进行迭代，直到收敛，从而产生更优的布线结果。精确的拥塞预测在电路布线中起着至关重要的作用，不幸的是，直到设计周期的后期，也就是缓慢的布局和布线流程，精确的拥塞结果才被准确地知道。&lt;/p>
&lt;p>​	这启发我们设计一个跨设计阶段(Cross-stage)的拥塞预测方法，在设计初期进行布局布线优化，从而加速优化迭代流程。多个先前的工作尝试在利用布局数据预测详细路由(Detail Route)拥塞，以优化放置解决方案的可达性，如：RUDY、GTL、POLAR 2.0等。这些基于专家经验的方法往往预测精度较低。近年来，随着图神经网络(Graph Neural Network, GNN)在学习图结构和挖掘图信息方面展示出了卓越的效果。由于电路结构可以自然地表示为图，图神经网络在电子设计自动化领域受到了越来越多的关注。GNN 模型可以端到端的方式学习全局指标而无需额外的特征工程比传统深度学习方法更高的准确度。&lt;/p>
&lt;p>​	因此，本课题将设计实现基于图神经网络的EDA预路由拥塞预测任务，给定电路布局结果，或仅仅根据电路网表内容，实现对布线后的拥塞结果预测。&lt;/p>
&lt;p>内容&lt;/p>
&lt;ul>
&lt;li>学习DeepLearning框架(Pytorch/Tensorflow)的使用, 环境的搭建, 图神经网络模型(GNN, Graph Neural Network)的搭建，综述调研&lt;/li>
&lt;li>学习并掌握一款工具的使用(OpenROAD(推荐)/Candance/Innovus). 并且利用工具获取相关数据集&lt;/li>
&lt;li>学习与复现相关论文，基于所学内容设计基于GNN的预路由拥塞预测架构, 实现拥塞预测.&lt;/li>
&lt;li>设计创新点, 改进模型性能, 实现结果分析, 结果可视化, 模型对比实验(精度/推理速度/内存占用等), 消融实验等.&lt;/li>
&lt;/ul>
&lt;p>参考资料以及说明&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
 &lt;a href="https://github.com/wangyouze/GNN-algorithms">图神经网络相关算法详述及实现&lt;/a>:一个GNN教程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://past.date-conference.com/proceedings-archive/2007/DATE07/PDFFILES/08.7_1.PDF">RUDY：Fast and Accurate Routing Demand Estimation for Efficient Routability-driven Placement&lt;/a> ：一个基于布局结果的快速路由拥塞估计器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://dl.acm.org/doi/abs/10.1145/1837274.1837422">GTL:Detecting tangled logic structures in VLSI netlists&lt;/a>: 一种基于图结构直接从网表中估计拥塞的方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://ieeexplore.ieee.org/document/6881450">POLAR 2.0: An effective routability-driven placer&lt;/a>：一个基于拥塞预测与可达性的布局工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="http://www.lib.scut.edu.cn/wwsjk/list.htm">华南理工大学图书馆数据库&lt;/a>：可免费下载各大国内外期刊文章&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://scholar.google.com/">Google Scholar&lt;/a>: 一个学术论文搜索引擎&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://www.connectedpapers.com/">Connected Papers | Find and explore academic papers&lt;/a>: 一个基于图相关性论文搜索引擎&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://ai4eda.github.io/">Awesome AI for EDA&lt;/a>：EDA研究中现有AI方向的高质量高影响力论文列表网站&lt;/p></description></item><item><title>bs24</title><link>https://pxgh02.github.io/zh/docs/Digtal/Routing/global-router/congestion/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%A2%84%E8%B7%AF%E7%94%B1%E6%8B%A5%E5%A1%9E%E9%A2%84%E6%B5%8B%E7%A0%94%E7%A9%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Routing/global-router/congestion/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%A2%84%E8%B7%AF%E7%94%B1%E6%8B%A5%E5%A1%9E%E9%A2%84%E6%B5%8B%E7%A0%94%E7%A9%B6/</guid><description>&lt;p>基于图神经网络的EDA预路由拥塞预测研究&lt;/p>
&lt;p>课题描述:&lt;/p>
&lt;p>​	近年来随着数字芯片使用越来越小的工艺制程和芯片内包含越来越多的逻辑单元，使其设计更新迭代优化的难度越来越大。由于数字后端中的布局(Placement)布线(路由, Route)流程属于是NP-Hard的算法优化问题，EDA(Electronic Design Automation)工具在这一阶段往往及其费时，导致更长的物理设计周期。&lt;/p>
&lt;p>​	在数字电路优化过程中，布线拥塞是用于物理设计过程迭代优化的重要指标。某些区域的布线密度过高，导致无法继续进行有效的布线，进而导致时序与设计规则违例等问题。为此，许多现代综合与布局工具利用拥塞数据，以尽量减少最终物理设计中的拥塞影响。通过布线的拥塞数据，布局布线工具将相应地优化相关的可移动单元位置，以减少线长度、拥塞和违例，进行迭代，直到收敛，从而产生更优的布线结果。精确的拥塞预测在电路布线中起着至关重要的作用，不幸的是，直到设计周期的后期，也就是缓慢的布局和布线流程，精确的拥塞结果才被准确地知道。&lt;/p>
&lt;p>​	这启发我们设计一个跨设计阶段(Cross-stage)的拥塞预测方法，在设计初期进行布局布线优化，从而加速优化迭代流程。多个先前的工作尝试在利用布局数据预测详细路由(Detail Route)拥塞，以优化放置解决方案的可达性，如：RUDY、GTL、POLAR 2.0等。这些基于专家经验的方法往往预测精度较低。近年来，随着图神经网络(Graph Neural Network, GNN)在学习图结构和挖掘图信息方面展示出了卓越的效果。由于电路结构可以自然地表示为图，图神经网络在电子设计自动化领域受到了越来越多的关注。GNN 模型可以端到端的方式学习全局指标而无需额外的特征工程比传统深度学习方法更高的准确度。&lt;/p>
&lt;p>​	因此，本课题将设计实现基于图神经网络的EDA预路由拥塞预测任务，给定电路布局结果，或仅仅根据电路网表内容，实现对布线后的拥塞结果预测。&lt;/p>
&lt;p>内容&lt;/p>
&lt;ul>
&lt;li>学习DeepLearning框架(Pytorch/Tensorflow)的使用, 环境的搭建, 图神经网络模型(GNN, Graph Neural Network)的搭建，综述调研&lt;/li>
&lt;li>学习并掌握一款工具的使用(OpenROAD(推荐)/Candance/Innovus). 并且利用工具获取相关数据集&lt;/li>
&lt;li>学习与复现相关论文，基于所学内容设计基于GNN的预路由拥塞预测架构, 实现拥塞预测.&lt;/li>
&lt;li>设计创新点, 改进模型性能, 实现结果分析, 结果可视化, 模型对比实验(精度/推理速度/内存占用等), 消融实验等.&lt;/li>
&lt;/ul>
&lt;p>参考资料以及说明&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
 &lt;a href="https://github.com/wangyouze/GNN-algorithms">图神经网络相关算法详述及实现&lt;/a>:一个GNN教程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://past.date-conference.com/proceedings-archive/2007/DATE07/PDFFILES/08.7_1.PDF">RUDY：Fast and Accurate Routing Demand Estimation for Efficient Routability-driven Placement&lt;/a> ：一个基于布局结果的快速路由拥塞估计器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://dl.acm.org/doi/abs/10.1145/1837274.1837422">GTL:Detecting tangled logic structures in VLSI netlists&lt;/a>: 一种基于图结构直接从网表中估计拥塞的方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://ieeexplore.ieee.org/document/6881450">POLAR 2.0: An effective routability-driven placer&lt;/a>：一个基于拥塞预测与可达性的布局工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="http://www.lib.scut.edu.cn/wwsjk/list.htm">华南理工大学图书馆数据库&lt;/a>：可免费下载各大国内外期刊文章&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://scholar.google.com/">Google Scholar&lt;/a>: 一个学术论文搜索引擎&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://www.connectedpapers.com/">Connected Papers | Find and explore academic papers&lt;/a>: 一个基于图相关性论文搜索引擎&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;a href="https://ai4eda.github.io/">Awesome AI for EDA&lt;/a>：EDA研究中现有AI方向的高质量高影响力论文列表网站&lt;/p></description></item><item><title>eda+gnn</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/notebak/EDA+GNN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/notebak/EDA+GNN/</guid><description>&lt;h1 id="survey">
 Survey
 &lt;a class="anchor" href="#survey">#&lt;/a>
&lt;/h1>
&lt;h2 id="background--intro">
 Background &amp;amp; Intro
 &lt;a class="anchor" href="#background--intro">#&lt;/a>
&lt;/h2>
&lt;p>只有在物理验证和签名(sign off)以及测试期间，才能衡量设计在功率、性能和面积 (PPA) 方面的质量。通常需要在中间步骤中进行纠正修改，这会导致设计的多次迭代。因此，在设计的早期阶段对 PPA 的估计将减少所需的迭代次数，增加设计的可靠性，同时深入研究flow，并最终提高结果质量 (QoR)&lt;/p>
&lt;h3 id="np-complete">
 NP-complete
 &lt;a class="anchor" href="#np-complete">#&lt;/a>
&lt;/h3>
&lt;p>EDA 工具通常面临 &lt;strong>NP-complete&lt;/strong> 问题，机器学习 (ML) 方法可以更好更快地解决这些问题&lt;/p>
&lt;p>&lt;strong>NP问题&lt;/strong>是一类可以通过非确定性图灵机( Non-deterministic Turing Machine)在多项式时间(Polynomial time)内解决的决策问题集合。&lt;/p>
&lt;p>NP问题中最困难的问题称之为NP完全问题(NP-complete)&lt;/p>
&lt;h3 id="ml">
 ML
 &lt;a class="anchor" href="#ml">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>ML 已集成到 EDA 中，尤其是逻辑综合、布局、布线、测试和验证 [23]&lt;/strong>
ML 用于预测传统方法的最佳配置。其次，ML 学习模型的特征及其性能来预测看不见的设计的行为，而无需运行昂贵的综合步骤。此外，在优化 PPA 的同时，可以通过 ML 进行设计空间探索。最后，&lt;strong>强化学习 (RL)&lt;/strong> 探索设计空间、学习策略并执行转换，以通过“人工智能辅助设计流程”获得展望未来的最佳设计。
在 EDA 中使用 ML 的一个促成因素是 &lt;strong>EDA 工具在设计过程中生成的大量数据&lt;/strong>。
&lt;strong>欧几里得数据&lt;/strong>&lt;/p>
&lt;h2 id="eda">
 EDA
 &lt;a class="anchor" href="#eda">#&lt;/a>
&lt;/h2>
&lt;h3 id="flow">
 flow
 &lt;a class="anchor" href="#flow">#&lt;/a>
&lt;/h3>
&lt;h4 id="逻辑综合">
 &lt;strong>逻辑综合&lt;/strong>
 &lt;a class="anchor" href="#%e9%80%bb%e8%be%91%e7%bb%bc%e5%90%88">#&lt;/a>
&lt;/h4>
&lt;p>&lt;strong>逻辑综合&lt;/strong>将 HDL 中的 RTL 块映射到从&lt;strong>给定技术库&lt;/strong>中选择的&lt;strong>门组合&lt;/strong>，同时针对不同目标优化设计。通常，这种优化涉及&lt;strong>时序收敛、面积和功耗之间的权衡&lt;/strong>。&lt;/p>
&lt;p>描述硬件设计的 RTL 模块被映射到技术库中的逻辑单元。&lt;strong>此映射必须满足时序约束&lt;/strong>，以在所需时钟速率下运行，&lt;strong>同时考虑面积和功耗&lt;/strong>。因此，&lt;strong>综合是一个可以应用 ML 的复杂优化问题&lt;/strong>。例如，&lt;strong>提供更早的 QoR 预测以避免耗时的合成步骤的多次运行&lt;/strong>&lt;/p></description></item><item><title>eda+gnn</title><link>https://pxgh02.github.io/zh/docs/Digtal/flow/notebak/EDA+GNN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/flow/notebak/EDA+GNN/</guid><description>&lt;h1 id="survey">
 Survey
 &lt;a class="anchor" href="#survey">#&lt;/a>
&lt;/h1>
&lt;h2 id="background--intro">
 Background &amp;amp; Intro
 &lt;a class="anchor" href="#background--intro">#&lt;/a>
&lt;/h2>
&lt;p>只有在物理验证和签名(sign off)以及测试期间，才能衡量设计在功率、性能和面积 (PPA) 方面的质量。通常需要在中间步骤中进行纠正修改，这会导致设计的多次迭代。因此，在设计的早期阶段对 PPA 的估计将减少所需的迭代次数，增加设计的可靠性，同时深入研究flow，并最终提高结果质量 (QoR)&lt;/p>
&lt;h3 id="np-complete">
 NP-complete
 &lt;a class="anchor" href="#np-complete">#&lt;/a>
&lt;/h3>
&lt;p>EDA 工具通常面临 &lt;strong>NP-complete&lt;/strong> 问题，机器学习 (ML) 方法可以更好更快地解决这些问题&lt;/p>
&lt;p>&lt;strong>NP问题&lt;/strong>是一类可以通过非确定性图灵机( Non-deterministic Turing Machine)在多项式时间(Polynomial time)内解决的决策问题集合。&lt;/p>
&lt;p>NP问题中最困难的问题称之为NP完全问题(NP-complete)&lt;/p>
&lt;h3 id="ml">
 ML
 &lt;a class="anchor" href="#ml">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>ML 已集成到 EDA 中，尤其是逻辑综合、布局、布线、测试和验证 [23]&lt;/strong>
ML 用于预测传统方法的最佳配置。其次，ML 学习模型的特征及其性能来预测看不见的设计的行为，而无需运行昂贵的综合步骤。此外，在优化 PPA 的同时，可以通过 ML 进行设计空间探索。最后，&lt;strong>强化学习 (RL)&lt;/strong> 探索设计空间、学习策略并执行转换，以通过“人工智能辅助设计流程”获得展望未来的最佳设计。
在 EDA 中使用 ML 的一个促成因素是 &lt;strong>EDA 工具在设计过程中生成的大量数据&lt;/strong>。
&lt;strong>欧几里得数据&lt;/strong>&lt;/p>
&lt;h2 id="eda">
 EDA
 &lt;a class="anchor" href="#eda">#&lt;/a>
&lt;/h2>
&lt;h3 id="flow">
 flow
 &lt;a class="anchor" href="#flow">#&lt;/a>
&lt;/h3>
&lt;h4 id="逻辑综合">
 &lt;strong>逻辑综合&lt;/strong>
 &lt;a class="anchor" href="#%e9%80%bb%e8%be%91%e7%bb%bc%e5%90%88">#&lt;/a>
&lt;/h4>
&lt;p>&lt;strong>逻辑综合&lt;/strong>将 HDL 中的 RTL 块映射到从&lt;strong>给定技术库&lt;/strong>中选择的&lt;strong>门组合&lt;/strong>，同时针对不同目标优化设计。通常，这种优化涉及&lt;strong>时序收敛、面积和功耗之间的权衡&lt;/strong>。&lt;/p>
&lt;p>描述硬件设计的 RTL 模块被映射到技术库中的逻辑单元。&lt;strong>此映射必须满足时序约束&lt;/strong>，以在所需时钟速率下运行，&lt;strong>同时考虑面积和功耗&lt;/strong>。因此，&lt;strong>综合是一个可以应用 ML 的复杂优化问题&lt;/strong>。例如，&lt;strong>提供更早的 QoR 预测以避免耗时的合成步骤的多次运行&lt;/strong>&lt;/p></description></item><item><title>EDA4PR</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/EDA4PR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/EDA4PR/</guid><description>&lt;h1 id="研究背景">
 研究背景
 &lt;a class="anchor" href="#%e7%a0%94%e7%a9%b6%e8%83%8c%e6%99%af">#&lt;/a>
&lt;/h1>
&lt;p>**典型的芯片设计流程是先做前端、后端设计，再去验证性能、功耗和面积。**但由于流程太长，在前端设计的时候，无法保证后端设计的效果，所以很多时候需要进行跨环节建模，在早期设计环节预测后续环节的求解质量，这当中就很适合AI算法来进行辅助。&lt;/p>
&lt;p>除了建模之外，另外一个关键问题是优化。EDA中经常要求解各种各样的组合优化问题。这些问题往往是 NP难题，比如经典的旅行商问题。传统上，我们会通过一些启发探索的方法来求解。但随着规模不断增大、设计约束越来越多，这种探索往往遇到效率瓶颈，所以我们需要通过机器学习技术进行辅助，寻找有效策略，提高效率。&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250105141458960.png" alt="image-20250105141458960" />&lt;/p>
&lt;h1 id="难点">
 难点
 &lt;a class="anchor" href="#%e9%9a%be%e7%82%b9">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241013184936794.png" alt="image-20241013184936794" />&lt;/p>
&lt;ol>
&lt;li>大图&amp;ndash;&amp;gt;&lt;/li>
&lt;li>数据集&amp;ndash;&amp;gt;&lt;/li>
&lt;li>泛化能力&amp;ndash;&amp;gt;&lt;/li>
&lt;li>非DAG?&lt;/li>
&lt;li>route: 3D，45°，30°&lt;/li>
&lt;li>先进的工艺：7nm&lt;/li>
&lt;li>很多Placer and Router还是有很多人工定义的超参数？（不general）&lt;/li>
&lt;li>现在真的还有必要把Router分成Global 和Detail 吗？&lt;/li>
&lt;li>GR: total maze routing&lt;/li>
&lt;li>GR: Consider timing and power consumption&lt;/li>
&lt;/ol>
&lt;h1 id="研究方向">
 研究方向
 &lt;a class="anchor" href="#%e7%a0%94%e7%a9%b6%e6%96%b9%e5%90%91">#&lt;/a>
&lt;/h1>
&lt;h2 id="digtal">
 Digtal
 &lt;a class="anchor" href="#digtal">#&lt;/a>
&lt;/h2>
&lt;p>详细查看
 &lt;a href="https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/EDA4PR-Digtal/">EDA4PR-Digtal&lt;/a>&lt;/p>
&lt;h1 id="相关数据集">
 相关数据集
 &lt;a class="anchor" href="#%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e9%9b%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="only-rtl">
 only rtl
 &lt;a class="anchor" href="#only-rtl">#&lt;/a>
&lt;/h2>
&lt;h3 id="home--opencores">
 
 &lt;a href="https://opencores.org/">Home :: OpenCores&lt;/a>
 &lt;a class="anchor" href="#home--opencores">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116140649477.png" alt="image-20241116140649477" />&lt;/p>
&lt;h3 id="iwls-2005-benchmarks">
 
 &lt;a href="https://iwls.org/iwls2005/benchmarks.html">IWLS 2005 Benchmarks&lt;/a>
 &lt;a class="anchor" href="#iwls-2005-benchmarks">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116140821429.png" alt="image-20241116140821429" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116140834409.png" alt="image-20241116140834409" />&lt;/p>
&lt;h3 id="openlane-examples-examples-from-the-openlane-repository">
 
 &lt;a href="https://github.com/klasnordmark/openlane-examples">openlane-examples: Examples from the Openlane repository&lt;/a>
 &lt;a class="anchor" href="#openlane-examples-examples-from-the-openlane-repository">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241118160109426.png" alt="image-20241118160109426" />&lt;/p>
&lt;h2 id="global-route">
 Global route
 &lt;a class="anchor" href="#global-route">#&lt;/a>
&lt;/h2>
&lt;h3 id="ispd-2007">
 ISPD-2007
 &lt;a class="anchor" href="#ispd-2007">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250209155834613.png" alt="image-20250209155834613" />&lt;/p></description></item><item><title>EDA4PR</title><link>https://pxgh02.github.io/zh/docs/Digtal/flow/EDA4PR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/flow/EDA4PR/</guid><description>&lt;h1 id="研究背景">
 研究背景
 &lt;a class="anchor" href="#%e7%a0%94%e7%a9%b6%e8%83%8c%e6%99%af">#&lt;/a>
&lt;/h1>
&lt;p>**典型的芯片设计流程是先做前端、后端设计，再去验证性能、功耗和面积。**但由于流程太长，在前端设计的时候，无法保证后端设计的效果，所以很多时候需要进行跨环节建模，在早期设计环节预测后续环节的求解质量，这当中就很适合AI算法来进行辅助。&lt;/p>
&lt;p>除了建模之外，另外一个关键问题是优化。EDA中经常要求解各种各样的组合优化问题。这些问题往往是 NP难题，比如经典的旅行商问题。传统上，我们会通过一些启发探索的方法来求解。但随着规模不断增大、设计约束越来越多，这种探索往往遇到效率瓶颈，所以我们需要通过机器学习技术进行辅助，寻找有效策略，提高效率。&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250105141458960.png" alt="image-20250105141458960" />&lt;/p>
&lt;h1 id="难点">
 难点
 &lt;a class="anchor" href="#%e9%9a%be%e7%82%b9">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241013184936794.png" alt="image-20241013184936794" />&lt;/p>
&lt;ol>
&lt;li>大图&amp;ndash;&amp;gt;&lt;/li>
&lt;li>数据集&amp;ndash;&amp;gt;&lt;/li>
&lt;li>泛化能力&amp;ndash;&amp;gt;&lt;/li>
&lt;li>非DAG?&lt;/li>
&lt;li>route: 3D，45°，30°&lt;/li>
&lt;li>先进的工艺：7nm&lt;/li>
&lt;li>很多Placer and Router还是有很多人工定义的超参数？（不general）&lt;/li>
&lt;li>现在真的还有必要把Router分成Global 和Detail 吗？&lt;/li>
&lt;li>GR: total maze routing&lt;/li>
&lt;li>GR: Consider timing and power consumption&lt;/li>
&lt;/ol>
&lt;h1 id="研究方向">
 研究方向
 &lt;a class="anchor" href="#%e7%a0%94%e7%a9%b6%e6%96%b9%e5%90%91">#&lt;/a>
&lt;/h1>
&lt;h2 id="cross-stage-prediction">
 Cross-Stage Prediction
 &lt;a class="anchor" href="#cross-stage-prediction">#&lt;/a>
&lt;/h2>
&lt;h3 id="routing-congestion-prediction">
 routing congestion prediction
 &lt;a class="anchor" href="#routing-congestion-prediction">#&lt;/a>
&lt;/h3>
&lt;h4 id="background">
 background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Routing congestion can overwhelm routing resources and lead to low cell utilization and routing detours&lt;/p>
&lt;/li>
&lt;li>
&lt;p>congestion is not known accurately until late in the design cycle, after placement and routing.&lt;/p></description></item><item><title>EDA4PR-Digtal</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/EDA4PR-Digtal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/EDA4PR-Digtal/</guid><description>&lt;h1 id="cross-stage-prediction">
 Cross-Stage Prediction
 &lt;a class="anchor" href="#cross-stage-prediction">#&lt;/a>
&lt;/h1>
&lt;h2 id="congestion">
 congestion
 &lt;a class="anchor" href="#congestion">#&lt;/a>
&lt;/h2>
&lt;h3 id="background">
 background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Routing congestion can overwhelm routing resources and lead to low cell utilization and routing detours&lt;/p>
&lt;/li>
&lt;li>
&lt;p>congestion is not known accurately until late in the design cycle, after placement and routing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Many modern placement and synthesis tools leverage congestion estimation in their cost analysis in order to minimize the effects of congestion in the final physical design&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101193119582.png" alt="image-20241101193119582" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is known that the total net length can be a good proxy for congestion&lt;/p></description></item><item><title>Flow</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/flow/flow/</guid><description>&lt;h1 id="ai-4-science">
 AI 4 Science
 &lt;a class="anchor" href="#ai-4-science">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241213120306409.png" alt="image-20241213120306409" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241213120350716.png" alt="image-20241213120350716" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241213120425645.png" alt="image-20241213120425645" />&lt;/p>
&lt;h1 id="数字集成电路后端设计整体流程">
 数字集成电路后端设计整体流程
 &lt;a class="anchor" href="#%e6%95%b0%e5%ad%97%e9%9b%86%e6%88%90%e7%94%b5%e8%b7%af%e5%90%8e%e7%ab%af%e8%ae%be%e8%ae%a1%e6%95%b4%e4%bd%93%e6%b5%81%e7%a8%8b">#&lt;/a>
&lt;/h1>
&lt;p>在完成前端设计、逻辑综合和时序分析后，后端设计阶段开始&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241210110751568.png" alt="image-20241210110751568" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241210024517847.png" alt="image-20241210024517847" />&lt;/p>
&lt;p>（1）布局规划（Floorplan）： 在布局规划阶段，设计团队确定芯片的大致布局，包括模块位置、互连和电源网络的布局。这个阶段的主要目标是确保设计满足所有功能需求和制造约束，同时优化芯片的性能和成本。&lt;/p>
&lt;p>（2）宏块和标准单元布局（Placement）： 此阶段中，具体摆放包括宏模块和标准单元。算法将尝试在保持功能和电气性能的前提下，最小化连线长度和延迟，优化布局密度。&lt;/p>
&lt;p>（3）时钟树合成（Clock Tree Synthesis，CTS）： 布局完成后，进行时钟树合成。CTS 的目的是构建一个时钟网络，以最小化芯片上不同部分之间的时钟偏差，并确保整个芯片的同步运行。&lt;/p>
&lt;p>（4）布线（Routing）： 在 CTS 之后，进行布线阶段，此阶段建立电子连接，以实现设计中的所有逻辑互联。布线需要解决路径规划和信号完整性问题，确保信号在整个芯片上无干扰地传递。&lt;/p>
&lt;p>（5）验证和测评： 最后，进行布局与布线后的验证工作，包括电路验证、时序分析和功耗分析等。&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116193848706.png" alt="image-20241116193848706" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116142815434.png" alt="image-20241116142815434" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116142826799.png" alt="image-20241116142826799" />&lt;/p>
&lt;h2 id="floorplanning布图">
 Floorplanning（布图)
 &lt;a class="anchor" href="#floorplanning%e5%b8%83%e5%9b%be">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>确定核心和外围区域：定义芯片的核心逻辑区和外围接口区。
&lt;ul>
&lt;li>&lt;strong>核心区域&lt;/strong>：这是用于放置 
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e9%80%bb%e8%be%91%e9%97%a8&amp;amp;zhida_source=entity">逻辑门&lt;/a>、触发器等基础元件的区域。&lt;/li>
&lt;li>&lt;strong>外围区域&lt;/strong>：这里通常用于放置 I/O pads，电源和地引脚。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>确定 IP Blocks 的位置：IP（Intellectual Property）模块的大致位置和尺寸。
&lt;ul>
&lt;li>硬宏（Hard Macros）：例如存储器、
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%a8%a1%e6%95%b0%e8%bd%ac%e6%8d%a2%e5%99%a8&amp;amp;zhida_source=entity">模数转换器&lt;/a>（ADCs）等，通常有固定的大小和形状。&lt;/li>
&lt;li>软宏（Soft Macros）：通常是可以重新合成的逻辑模块，如处理器核心、
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=DSP%e5%8d%95%e5%85%83&amp;amp;zhida_source=entity">DSP 单元&lt;/a> 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初步 Power Planning：设计初步的电源网格和地网。
&lt;ul>
&lt;li>&lt;strong>
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e7%94%b5%e6%ba%90%e7%bd%91%e6%a0%bc%e8%ae%be%e8%ae%a1&amp;amp;zhida_source=entity">电源网格设计&lt;/a>&lt;/strong>：创建电源和地网格来提供电流和参考电压。&lt;/li>
&lt;li>&lt;strong>电源环（Power Rings）&lt;/strong>：在芯片外围设计电源环，用于电源和地的分发。&lt;/li>
&lt;li>&lt;strong>电源铺垫（Power Pads）&lt;/strong>：确定用于外部电源连接的电源和地铺垫的位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I/O Planning：规划输入/输出引脚的位置。
&lt;ul>
&lt;li>&lt;strong>引脚位置&lt;/strong>：根据接口要求（如 GPIO、DDR 接口等）确定 I/O 引脚的位置。&lt;/li>
&lt;li>&lt;strong>引脚电特性&lt;/strong>：确定每个 I/O 引脚的电性能需求，如驱动能力、接受阈值等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设置约束：设置时序、面积和功耗的约束。（各种 view, block)
&lt;ul>
&lt;li>&lt;strong>
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%97%b6%e5%ba%8f%e7%ba%a6%e6%9d%9f&amp;amp;zhida_source=entity">时序约束&lt;/a>&lt;/strong>：定义时钟域、时钟频率和时序要求。&lt;/li>
&lt;li>&lt;strong>面积约束&lt;/strong>：如果有面积限制，需要明确这一点。&lt;/li>
&lt;li>&lt;strong>功耗约束&lt;/strong>：设定功耗上限或优化目标。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="placement布局">
 Placement（布局）
 &lt;a class="anchor" href="#placement%e5%b8%83%e5%b1%80">#&lt;/a>
&lt;/h2>
&lt;p>设计的所有逻辑元件（例如标准单元、触发器、门等）和预定义的 IP 块（例如硬宏）被物理地放置在芯片的核心区域内&lt;/p></description></item><item><title>Flow</title><link>https://pxgh02.github.io/zh/docs/Digtal/flow/flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/flow/flow/</guid><description>&lt;h1 id="ai-4-science">
 AI 4 Science
 &lt;a class="anchor" href="#ai-4-science">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241213120306409.png" alt="image-20241213120306409" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241213120350716.png" alt="image-20241213120350716" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241213120425645.png" alt="image-20241213120425645" />&lt;/p>
&lt;h1 id="数字集成电路后端设计整体流程">
 数字集成电路后端设计整体流程
 &lt;a class="anchor" href="#%e6%95%b0%e5%ad%97%e9%9b%86%e6%88%90%e7%94%b5%e8%b7%af%e5%90%8e%e7%ab%af%e8%ae%be%e8%ae%a1%e6%95%b4%e4%bd%93%e6%b5%81%e7%a8%8b">#&lt;/a>
&lt;/h1>
&lt;p>在完成前端设计、逻辑综合和时序分析后，后端设计阶段开始&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241210110751568.png" alt="image-20241210110751568" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241210024517847.png" alt="image-20241210024517847" />&lt;/p>
&lt;p>（1）布局规划（Floorplan）： 在布局规划阶段，设计团队确定芯片的大致布局，包括模块位置、互连和电源网络的布局。这个阶段的主要目标是确保设计满足所有功能需求和制造约束，同时优化芯片的性能和成本。&lt;/p>
&lt;p>（2）宏块和标准单元布局（Placement）： 此阶段中，具体摆放包括宏模块和标准单元。算法将尝试在保持功能和电气性能的前提下，最小化连线长度和延迟，优化布局密度。&lt;/p>
&lt;p>（3）时钟树合成（Clock Tree Synthesis，CTS）： 布局完成后，进行时钟树合成。CTS 的目的是构建一个时钟网络，以最小化芯片上不同部分之间的时钟偏差，并确保整个芯片的同步运行。&lt;/p>
&lt;p>（4）布线（Routing）： 在 CTS 之后，进行布线阶段，此阶段建立电子连接，以实现设计中的所有逻辑互联。布线需要解决路径规划和信号完整性问题，确保信号在整个芯片上无干扰地传递。&lt;/p>
&lt;p>（5）验证和测评： 最后，进行布局与布线后的验证工作，包括电路验证、时序分析和功耗分析等。&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116193848706.png" alt="image-20241116193848706" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116142815434.png" alt="image-20241116142815434" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241116142826799.png" alt="image-20241116142826799" />&lt;/p>
&lt;h2 id="floorplanning布图">
 Floorplanning（布图)
 &lt;a class="anchor" href="#floorplanning%e5%b8%83%e5%9b%be">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>确定核心和外围区域：定义芯片的核心逻辑区和外围接口区。
&lt;ul>
&lt;li>&lt;strong>核心区域&lt;/strong>：这是用于放置 
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e9%80%bb%e8%be%91%e9%97%a8&amp;amp;zhida_source=entity">逻辑门&lt;/a>、触发器等基础元件的区域。&lt;/li>
&lt;li>&lt;strong>外围区域&lt;/strong>：这里通常用于放置 I/O pads，电源和地引脚。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>确定 IP Blocks 的位置：IP（Intellectual Property）模块的大致位置和尺寸。
&lt;ul>
&lt;li>硬宏（Hard Macros）：例如存储器、
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%a8%a1%e6%95%b0%e8%bd%ac%e6%8d%a2%e5%99%a8&amp;amp;zhida_source=entity">模数转换器&lt;/a>（ADCs）等，通常有固定的大小和形状。&lt;/li>
&lt;li>软宏（Soft Macros）：通常是可以重新合成的逻辑模块，如处理器核心、
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=DSP%e5%8d%95%e5%85%83&amp;amp;zhida_source=entity">DSP 单元&lt;/a> 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初步 Power Planning：设计初步的电源网格和地网。
&lt;ul>
&lt;li>&lt;strong>
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e7%94%b5%e6%ba%90%e7%bd%91%e6%a0%bc%e8%ae%be%e8%ae%a1&amp;amp;zhida_source=entity">电源网格设计&lt;/a>&lt;/strong>：创建电源和地网格来提供电流和参考电压。&lt;/li>
&lt;li>&lt;strong>电源环（Power Rings）&lt;/strong>：在芯片外围设计电源环，用于电源和地的分发。&lt;/li>
&lt;li>&lt;strong>电源铺垫（Power Pads）&lt;/strong>：确定用于外部电源连接的电源和地铺垫的位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I/O Planning：规划输入/输出引脚的位置。
&lt;ul>
&lt;li>&lt;strong>引脚位置&lt;/strong>：根据接口要求（如 GPIO、DDR 接口等）确定 I/O 引脚的位置。&lt;/li>
&lt;li>&lt;strong>引脚电特性&lt;/strong>：确定每个 I/O 引脚的电性能需求，如驱动能力、接受阈值等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设置约束：设置时序、面积和功耗的约束。（各种 view, block)
&lt;ul>
&lt;li>&lt;strong>
 &lt;a href="https://zhida.zhihu.com/search?content_id=233534347&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%97%b6%e5%ba%8f%e7%ba%a6%e6%9d%9f&amp;amp;zhida_source=entity">时序约束&lt;/a>&lt;/strong>：定义时钟域、时钟频率和时序要求。&lt;/li>
&lt;li>&lt;strong>面积约束&lt;/strong>：如果有面积限制，需要明确这一点。&lt;/li>
&lt;li>&lt;strong>功耗约束&lt;/strong>：设定功耗上限或优化目标。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="placement布局">
 Placement（布局）
 &lt;a class="anchor" href="#placement%e5%b8%83%e5%b1%80">#&lt;/a>
&lt;/h2>
&lt;p>设计的所有逻辑元件（例如标准单元、触发器、门等）和预定义的 IP 块（例如硬宏）被物理地放置在芯片的核心区域内&lt;/p></description></item><item><title>git</title><link>https://pxgh02.github.io/zh/docs/Other/Other/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/git/</guid><description>&lt;h1 id="基本指令">
 基本指令
 &lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%8c%87%e4%bb%a4">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240829133816554.png" alt="image-20240829133816554" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>add&lt;/code>：将工作区中的更改添加到本地暂存区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>commit&lt;/code>：将本地暂存区中的更改提交到地仓库，创建一个新的提交。 主要完成的内容就是创建一个新的提交，包括暂存区中的所有更改；每个提交都有一个唯一的哈希值，用于在版本历史中标识该提交。提交时，可以提供一条有意义的提交消息来描述更改的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>checkout&lt;/code>：用于在本地仓库中切换分支或恢复历史版本。 主要操作是将Git版本库中的内容拿到工作区。例如回退版本，连续两天提交了版本，第三天的时候，想要将工作区的内容回退到第一天提交的版本，就需要checkout操作回退版本。 或者从一个分支切换到另一个分支，分支的概念看下文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>clone&lt;/code>：克隆远程仓库到本地，创建一个本地仓库的副本。 克隆操作其实就是一个粘贴复制，把远程的仓库完整的拷贝到本地仓库；通常是包含两步：&lt;/p>
&lt;ul>
&lt;li>创建本地仓库：首先，在本地创建一个新的空白目录或指定已存在的目录作为本地仓库。这一步是为了给克隆的项目提供一个位置，用于存储远程仓库的内容和版本历史。&lt;/li>
&lt;li>克隆仓库：使用&lt;code>git clone&lt;/code>命令，将远程仓库的内容复制到本地仓库中。克隆操作会自动将远程仓库的全部历史记录、分支信息和文件复制到新创建的本地仓库目录中，并为远程仓库设置一个别名（默认为“origin”）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>push&lt;/code>：将本地仓库中的更改推送至远程仓库。 将本地的提交推送到远程仓库，更新远程仓库的分支和提交历史。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>pull&lt;/code>：从远程仓库拉取最新更改（相当于&lt;code>fetch&lt;/code> + &lt;code>merge&lt;/code>）。 其实也是两步；更新是从远程仓库（remote repository）到本地仓库（local repository），但实际的合并操作是将更改从本地仓库合并到工作区（working directory）和本地仓库的当前分支。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="创建版本库">
 创建版本库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e7%89%88%e6%9c%ac%e5%ba%93">#&lt;/a>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git 仓库是用于版本控制的一个特殊目录（&lt;code>.git&lt;/code>目录），它保存了项目的完整历史记录和元数据信息&lt;/p>
&lt;p>每当您在项目中添加、修改或删除文件时，Git 都会创建一个新的备份，称为提交（&lt;code>commit&lt;/code>）。提交是代码修改的快照，并包含了作者、时间戳以及相关的元数据信息。&lt;/p>
&lt;p>通过这些提交，Git 可以帮助您追踪项目历史，查看特定版本的代码状态，甚至回滚到之前的某个状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.git/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── branches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config	&lt;span style="color:#75715e">#包含了Git 仓库的配置选项，例如用户名、邮箱等。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── description
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── hooks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── applypatch-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── commit-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── fsmonitor-watchman.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── post-update.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-applypatch.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-commit.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-merge-commit.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-push.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-rebase.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-receive.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── prepare-commit-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── update.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── exclude
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── objects
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── pack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── refs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── heads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── tags
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="分支">
 分支
 &lt;a class="anchor" href="#%e5%88%86%e6%94%af">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240829134404593.png" alt="image-20240829134404593" />&lt;/p></description></item><item><title>makefile</title><link>https://pxgh02.github.io/zh/docs/Other/Other/makefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/makefile/</guid><description>&lt;h1 id="makefile">
 Makefile
 &lt;a class="anchor" href="#makefile">#&lt;/a>
&lt;/h1>
&lt;p>&lt;strong>xxx.mk&lt;/strong> 文件或者 &lt;strong>Makefile&lt;/strong> 都统称为 Makefile 脚本文件&lt;/p>
&lt;p>功能：指导 Make 软件控制 arm-gcc 等工具链去编译工程文件最终得到可执行文件&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240831224125900.png" alt="image-20240831224125900" />&lt;/p>
&lt;h2 id="基础规则">
 基础规则
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e8%a7%84%e5%88%99">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>目标：依赖条件
	命令	
&lt;/code>&lt;/pre>&lt;p>&lt;strong>拓展&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#根据工作原理，如果只改变其中一个文件，就只会编译这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">hello&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp printhello.cpp factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	g++ -o hello main.cpp printhello.cpp factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#使用变量CXX、TARGET 、OBJ，同时采用不同的依赖分别编译
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#根据工作原理，如果只改变其中一个文件，就只会编译这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OBJ &lt;span style="color:#f92672">=&lt;/span> main.o printhello.o factorial.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">##.mk-V2: ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#makefile 默认第一个目标文件为终极目标，生成就跑路，这时候可以用 ALL 来指定终极目标。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OBJ &lt;span style="color:#f92672">=&lt;/span> main.o printhello.o factorial.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V3: wildcard &amp;amp; patsubst 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./*.c&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#75715e">#匹配当前工作目录下的所有.c 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.c, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># 将参数 3 中，包含参数 1 的部分，替换为参数 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">###
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V4: clean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./*.c&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#75715e">#匹配当前工作目录下的所有.c 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.c, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># 将参数 3 中，包含参数 1 的部分，替换为参数 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">###
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#75715e"># “-” ：作用是，删除不存在文件时，不报错。顺序执行结束。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V5: 三个自动变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">$@&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示规则中的目标。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$^&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示所有依赖条件。组成一个列表，以空格隔开，如果这个列表中有重复项，则去重
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">$&amp;lt;&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示第一个依赖条件。如果将该变量应用在模式规则中，它可将依赖条件列表中的依赖依次取出，套用模式规则。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V6: 模式规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#要添加一个.cpp文件，不需要在 makefile 里面增加这个文件的 -o 的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">%.o &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V7: 静态模式规则？？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#使用静态模式规则，就是指定模式规则给谁用，这里指定模式规则给 obj 用，以后文件多了，文件集合会有很多个，就需要指定哪个文件集合用什么规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(obj) &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.o : %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V8: 伪目标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#当前文件夹下有 ALL 文件或者 clean 文件时，会导致 makefile 瘫痪，此时使用.PHONY: clean ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> clean ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(obj) &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.o : %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V9: 文件分类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#将上述 .cpp 文件都放到 src 目录中，.h 文件都放在 inc 目录中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./src/*.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst ./src/%.cpp, ./obj/%.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inc_path &lt;span style="color:#f92672">=&lt;/span> ./inc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXXFLAGS &lt;span style="color:#f92672">=&lt;/span> -Wall -c -I&lt;span style="color:#66d9ef">$(&lt;/span>inc_path&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">./obj/%.o &lt;/span>&lt;span style="color:#f92672">:&lt;/span> ./src/%.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>CXXFLAGS&lt;span style="color:#66d9ef">)&lt;/span> $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> clean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="make-的参数">
 make 的参数
 &lt;a class="anchor" href="#make-%e7%9a%84%e5%8f%82%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>-n：模拟执行 make、 make clean 命令。仅输出执行过程中的命令序列，但并不执行。&lt;/li>
&lt;li>-f：指定文件执行 make 命令。 xxxx.mk&lt;/li>
&lt;li>-j：可以并行构建多个目标，加快构建速度&lt;/li>
&lt;li>&lt;strong>-s&lt;/strong>‌ 或 ‌**&amp;ndash;silent&lt;strong>‌ 或 ‌&lt;/strong>&amp;ndash;quiet**‌：不显示命令。&lt;/li>
&lt;/ul>
&lt;h2 id="makefile-语法">
 Makefile 语法
 &lt;a class="anchor" href="#makefile-%e8%af%ad%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>使用echo进行printf&lt;/p></description></item><item><title>Placement</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Placement/placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Placement/placement/</guid><description>&lt;h1 id="介绍">
 介绍
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211164703395.png" alt="image-20241211164703395" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165044145.png" alt="image-20241211165044145" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165212711.png" alt="image-20241211165212711" />&lt;/p>
&lt;h1 id="placement">
 Placement
 &lt;a class="anchor" href="#placement">#&lt;/a>
&lt;/h1>
&lt;p>良好的布局会带来更好的芯片面积利用率、时序性能和可达性，而较差的布局会影响芯片的性能，甚至使其无法制造&lt;/p>
&lt;p>布局可以看作是具有几何约束的&lt;strong>二维装箱问题&lt;/strong>的一个更为复杂的变化。后者被认为是 
 &lt;a href="https://so.csdn.net/so/search?q=NP-hard&amp;amp;spm=1001.2101.3001.7020">NP-hard&lt;/a> 问题。&lt;/p>
&lt;p>布局与电路设计的逻辑互连和逻辑元件的几何位置有关。由于在布线之前无法准确评估放置解决方案的质量，导致设计流程中的&lt;strong>反馈循环很长&lt;/strong>，因此现代布局需要在早期阶段减少布线&lt;strong>拥塞(Congestion)&lt;strong>并提高&lt;/strong>可达性(Routebility)&lt;/strong>&lt;/p>
&lt;h2 id="wl估计方法">
 WL估计方法
 &lt;a class="anchor" href="#wl%e4%bc%b0%e8%ae%a1%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211170024405.png" alt="image-20241211170024405" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211170041005.png" alt="image-20241211170041005" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211170300719.png" alt="image-20241211170300719" />&lt;/p>
&lt;h1 id="global-placement">
 Global Placement
 &lt;a class="anchor" href="#global-placement">#&lt;/a>
&lt;/h1>
&lt;p>通常，全局布局（Global Placement）涉及宏布局（Macro Placement）和标准单元布局（Standard Cell Placement）。&lt;/p>
&lt;p>输入:网表&lt;/p>
&lt;p>优化目标:HPWL线长最小(最基本)…&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101174133908.png" alt="image-20241101174133908" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101174410136.png" alt="image-20241101174410136" />&lt;/p>
&lt;h1 id="detail-placement">
 Detail Placement
 &lt;a class="anchor" href="#detail-placement">#&lt;/a>
&lt;/h1>
&lt;p>详细布局（Detailed Placement）包括合法化（legalization），线长（wirelength）和可达性的细化（routability refinement）&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101174441633.png" alt="image-20241101174441633" />&lt;/p>
&lt;h1 id="history">
 history
 &lt;a class="anchor" href="#history">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165402430.png" alt="image-20241211165402430" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165447667.png" alt="image-20241211165447667" />&lt;/p>
&lt;h1 id="参考">
 参考
 &lt;a class="anchor" href="#%e5%8f%82%e8%80%83">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
 
 &lt;a href="2021-Place-YuBei-slice.pdf">2021-Place-YuBei-slice.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Placement</title><link>https://pxgh02.github.io/zh/docs/Digtal/Placement/placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Placement/placement/</guid><description>&lt;h1 id="介绍">
 介绍
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211164703395.png" alt="image-20241211164703395" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165044145.png" alt="image-20241211165044145" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165212711.png" alt="image-20241211165212711" />&lt;/p>
&lt;h1 id="placement">
 Placement
 &lt;a class="anchor" href="#placement">#&lt;/a>
&lt;/h1>
&lt;p>良好的布局会带来更好的芯片面积利用率、时序性能和可达性，而较差的布局会影响芯片的性能，甚至使其无法制造&lt;/p>
&lt;p>布局可以看作是具有几何约束的&lt;strong>二维装箱问题&lt;/strong>的一个更为复杂的变化。后者被认为是 
 &lt;a href="https://so.csdn.net/so/search?q=NP-hard&amp;amp;spm=1001.2101.3001.7020">NP-hard&lt;/a> 问题。&lt;/p>
&lt;p>布局与电路设计的逻辑互连和逻辑元件的几何位置有关。由于在布线之前无法准确评估放置解决方案的质量，导致设计流程中的&lt;strong>反馈循环很长&lt;/strong>，因此现代布局需要在早期阶段减少布线&lt;strong>拥塞(Congestion)&lt;strong>并提高&lt;/strong>可达性(Routebility)&lt;/strong>&lt;/p>
&lt;h2 id="wl估计方法">
 WL估计方法
 &lt;a class="anchor" href="#wl%e4%bc%b0%e8%ae%a1%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211170024405.png" alt="image-20241211170024405" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211170041005.png" alt="image-20241211170041005" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211170300719.png" alt="image-20241211170300719" />&lt;/p>
&lt;h1 id="global-placement">
 Global Placement
 &lt;a class="anchor" href="#global-placement">#&lt;/a>
&lt;/h1>
&lt;p>通常，全局布局（Global Placement）涉及宏布局（Macro Placement）和标准单元布局（Standard Cell Placement）。&lt;/p>
&lt;p>输入:网表&lt;/p>
&lt;p>优化目标:HPWL线长最小(最基本)…&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101174133908.png" alt="image-20241101174133908" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101174410136.png" alt="image-20241101174410136" />&lt;/p>
&lt;h1 id="detail-placement">
 Detail Placement
 &lt;a class="anchor" href="#detail-placement">#&lt;/a>
&lt;/h1>
&lt;p>详细布局（Detailed Placement）包括合法化（legalization），线长（wirelength）和可达性的细化（routability refinement）&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241101174441633.png" alt="image-20241101174441633" />&lt;/p>
&lt;h1 id="history">
 history
 &lt;a class="anchor" href="#history">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165402430.png" alt="image-20241211165402430" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241211165447667.png" alt="image-20241211165447667" />&lt;/p>
&lt;h1 id="参考">
 参考
 &lt;a class="anchor" href="#%e5%8f%82%e8%80%83">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
 
 &lt;a href="2021-Place-YuBei-slice.pdf">2021-Place-YuBei-slice.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Routing</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Routing/routing2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Routing/routing2/</guid><description>&lt;h1 id="简介">
 简介
 &lt;a class="anchor" href="#%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="gr--dr">
 GR &amp;amp; DR
 &lt;a class="anchor" href="#gr--dr">#&lt;/a>
&lt;/h2>
&lt;p>Routing is a critical yet complex phase in the implementation process of integrated circuits (ICs), often necessitating considerable time and effort. Given its complexity, the routing process is typically divided into two stages: global routing and detailed routing. &lt;code>Global routing&lt;/code>, the initial stage, establishes coarse-grained wire paths for signal nets, thereby providing valuable &lt;strong>guidance&lt;/strong> for the subsequent detailed routing stage, enhancing its efficiency. &lt;code>Detailed routing&lt;/code>, on the other hand, focuses on identifying valid physical paths, primarily within the routing guides set by global routing, while taking into account design rule constraints&lt;/p></description></item><item><title>Routing</title><link>https://pxgh02.github.io/zh/docs/Digtal/Routing/routing2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Routing/routing2/</guid><description>&lt;h1 id="简介">
 简介
 &lt;a class="anchor" href="#%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="gr--dr">
 GR &amp;amp; DR
 &lt;a class="anchor" href="#gr--dr">#&lt;/a>
&lt;/h2>
&lt;p>Routing is a critical yet complex phase in the implementation process of integrated circuits (ICs), often necessitating considerable time and effort. Given its complexity, the routing process is typically divided into two stages: global routing and detailed routing. &lt;code>Global routing&lt;/code>, the initial stage, establishes coarse-grained wire paths for signal nets, thereby providing valuable &lt;strong>guidance&lt;/strong> for the subsequent detailed routing stage, enhancing its efficiency. &lt;code>Detailed routing&lt;/code>, on the other hand, focuses on identifying valid physical paths, primarily within the routing guides set by global routing, while taking into account design rule constraints&lt;/p></description></item><item><title>Routing1</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Routing/routing1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Routing/routing1/</guid><description>&lt;h1 id="介绍">
 介绍
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h1>
&lt;p>随着IP复用，业界一度试图使用IP内部资源进行布线，但此举可能引发噪声和转换电压过大，因此&lt;strong>绕障策略&lt;/strong>在布线算法中发挥着重要的作用。&lt;/p>
&lt;h2 id="曼哈顿结构以及非曼哈顿结构">
 曼哈顿结构以及非曼哈顿结构
 &lt;a class="anchor" href="#%e6%9b%bc%e5%93%88%e9%a1%bf%e7%bb%93%e6%9e%84%e4%bb%a5%e5%8f%8a%e9%9d%9e%e6%9b%bc%e5%93%88%e9%a1%bf%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>总体布线的布线算法主要基于&lt;strong>曼哈顿结构以及非曼哈顿结构&lt;/strong>两种，非曼哈顿结构因其更强的布线优化能力受到越来越多研究人员的关注。布线互连结构可分为曼哈顿结构和非曼哈顿结构。曼哈顿结构的布线方向只能是&lt;strong>水平走线和垂直走&lt;/strong>线两种,而非曼哈顿结构的布线方向则更为多样化,主要包括走线方向为 **0°、90°和士45°**的X结构以及走线方向为 &lt;strong>0°、60°和 120°&lt;strong>的Y结构。随着系统级芯片(System-on-a-Chip,SoC)设计概念的出现和&lt;/strong>制造工艺的不断发展&lt;/strong>,**互连线的延迟对 VLSI设计的影响越来越大,同时互连线的不断增长会降低芯片的速度,造成过高的功耗以及增大噪声,**这要求更有效的互连线线长优化和更强的电路性能。但基于曼哈顿结构的相关物理设计阶段在优化互连线线长时限制了相关策略的优化能力。为优化芯片的整体性能,相关研究人员开始尝试基于非曼哈顿结构的布线。&lt;/p>
&lt;p>非曼哈顿结构的数学基础是&lt;strong>λ-几何学理论&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>(1)当λ=2时,布线的方向为ix/2,走线方向包括 0°和 90°,对应传统的曼哈顿结构,亦称为直角结构。
(2)当λ=3时,布线的方向为 iπ/3,走线方向包括 0°、60°和120°,称为Y结构。
(3)当λ=4时,布线的方向为 i/4,走线方向包括0°、90°和士45°,称为&lt;strong>X结构。已经得到工艺支持&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h1 id="意义">
 意义
 &lt;a class="anchor" href="#%e6%84%8f%e4%b9%89">#&lt;/a>
&lt;/h1>
&lt;p>物理设计过程是EDA的主要处理对象，是&lt;strong>人工最易出错&lt;/strong>的&lt;/p>
&lt;p>当前,超大规模集成电路(Very Large Scale Integration Circuit,VLSI)设计在许多高科技电子电路的发展中起着至关重要的作用。当前集成电路(IntegratedCircuit,IC)产业向超深亚微米工艺不断推进,芯片的集成度进一步提高,一块芯片上所能集成的电路元件越来越多,VLSI是将数百万个品体管集成到单个芯片中形成 IC 的过程。这一市场趋势对**物理设计(Physical Design,PD)和物理验证(Physical Verification,PV)**提出了许多挑战。以 VLSI为基础的电子信息产业的发展,对我国国民经济的发展、产业技术创新能力的提高以及现代国防建设都具有极其重要的意义。&lt;/p>
&lt;p>物理设计是VLSI构建流程中最为耗时的,其设计好坏将影响芯片的最终性能,包括时延特性,电能消耗、电路稳定性等。&lt;/p>
&lt;p>近年来 ，集成电路领域发展越来越迅猛 ，晶体管数量随集成电路制造⼯艺发展逐年增加 ，芯片内包含的逻辑门数量急剧提升 ，这给集成电路设计带来了巨大的难题。由于超大规模集成电路（very-largescale integration circuit，VLSI）逻辑的高度复杂性 ，其物理设计往往需要使用计算机辅助设计⼯具来完成。这就向电子设计自动化（electronic design automation，EDA）⼯具提出了严峻挑战&lt;/p>
&lt;p>在物理设计过程中 ，布线是极其重要的一环 。布线⼯作占据了 EDA 过程的&lt;strong>大部分时间&lt;/strong> ，甚至在大部分情况下 ，自动布线的结果还需要设计人员在&lt;strong>后期手⼯调整&lt;/strong>。具备优秀的布线速度及高布线质量的布线器对缩短芯片设计周==期有着至关重要==的作用 。&lt;/p>
&lt;h1 id="布线">
 布线
 &lt;a class="anchor" href="#%e5%b8%83%e7%ba%bf">#&lt;/a>
&lt;/h1>
&lt;p>在物理设计中需要采用&lt;strong>电路划分&lt;/strong>方法将复杂庞大的电路系统分解至合理小的电路子系统;其次,在电路划分后,&lt;strong>布图规划&lt;/strong>和&lt;strong>布局&lt;/strong>步骤则是将不同形状和大小的单元或模块合理地放置到芯片的不同布线区域,同时满足芯片固有的一些相关几何约束;再次,布局阶段确定模块和引脚各自的位置,在此基础上经&lt;strong>总体布线&lt;/strong>后,将每条待绕线的线网的各部分合理分配到芯片中的各个布线通道区;最后,由&lt;strong>详细布线&lt;/strong>得到各个布线通道区的实际绕线。&lt;/p>
&lt;h2 id="模型输入输出">
 模型输入输出
 &lt;a class="anchor" href="#%e6%a8%a1%e5%9e%8b%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba">#&lt;/a>
&lt;/h2>
&lt;h3 id="输入">
 输入
 &lt;a class="anchor" href="#%e8%be%93%e5%85%a5">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>cell, pin&amp;rsquo;s position&lt;/li>
&lt;li>netlist graph(connection relation)&lt;/li>
&lt;li>设计工艺：多少层，via几何形状信息，各种drc&lt;/li>
&lt;li>部分关键线网延时信息&lt;/li>
&lt;li>wire和via的电气特性&lt;/li>
&lt;/ul>
&lt;h3 id="输出">
 输出
 &lt;a class="anchor" href="#%e8%be%93%e5%87%ba">#&lt;/a>
&lt;/h3>
&lt;p>一个尽可能满足约束条件并更少得需要人⼯调整线网的布线结果&lt;/p></description></item><item><title>Routing1</title><link>https://pxgh02.github.io/zh/docs/Digtal/Routing/routing1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Routing/routing1/</guid><description>&lt;h1 id="介绍">
 介绍
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h1>
&lt;p>随着IP复用，业界一度试图使用IP内部资源进行布线，但此举可能引发噪声和转换电压过大，因此&lt;strong>绕障策略&lt;/strong>在布线算法中发挥着重要的作用。&lt;/p>
&lt;h2 id="曼哈顿结构以及非曼哈顿结构">
 曼哈顿结构以及非曼哈顿结构
 &lt;a class="anchor" href="#%e6%9b%bc%e5%93%88%e9%a1%bf%e7%bb%93%e6%9e%84%e4%bb%a5%e5%8f%8a%e9%9d%9e%e6%9b%bc%e5%93%88%e9%a1%bf%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>总体布线的布线算法主要基于&lt;strong>曼哈顿结构以及非曼哈顿结构&lt;/strong>两种，非曼哈顿结构因其更强的布线优化能力受到越来越多研究人员的关注。布线互连结构可分为曼哈顿结构和非曼哈顿结构。曼哈顿结构的布线方向只能是&lt;strong>水平走线和垂直走&lt;/strong>线两种,而非曼哈顿结构的布线方向则更为多样化,主要包括走线方向为 **0°、90°和士45°**的X结构以及走线方向为 &lt;strong>0°、60°和 120°&lt;strong>的Y结构。随着系统级芯片(System-on-a-Chip,SoC)设计概念的出现和&lt;/strong>制造工艺的不断发展&lt;/strong>,**互连线的延迟对 VLSI设计的影响越来越大,同时互连线的不断增长会降低芯片的速度,造成过高的功耗以及增大噪声,**这要求更有效的互连线线长优化和更强的电路性能。但基于曼哈顿结构的相关物理设计阶段在优化互连线线长时限制了相关策略的优化能力。为优化芯片的整体性能,相关研究人员开始尝试基于非曼哈顿结构的布线。&lt;/p>
&lt;p>非曼哈顿结构的数学基础是&lt;strong>λ-几何学理论&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>(1)当λ=2时,布线的方向为ix/2,走线方向包括 0°和 90°,对应传统的曼哈顿结构,亦称为直角结构。
(2)当λ=3时,布线的方向为 iπ/3,走线方向包括 0°、60°和120°,称为Y结构。
(3)当λ=4时,布线的方向为 i/4,走线方向包括0°、90°和士45°,称为&lt;strong>X结构。已经得到工艺支持&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h1 id="意义">
 意义
 &lt;a class="anchor" href="#%e6%84%8f%e4%b9%89">#&lt;/a>
&lt;/h1>
&lt;p>物理设计过程是EDA的主要处理对象，是&lt;strong>人工最易出错&lt;/strong>的&lt;/p>
&lt;p>当前,超大规模集成电路(Very Large Scale Integration Circuit,VLSI)设计在许多高科技电子电路的发展中起着至关重要的作用。当前集成电路(IntegratedCircuit,IC)产业向超深亚微米工艺不断推进,芯片的集成度进一步提高,一块芯片上所能集成的电路元件越来越多,VLSI是将数百万个品体管集成到单个芯片中形成 IC 的过程。这一市场趋势对**物理设计(Physical Design,PD)和物理验证(Physical Verification,PV)**提出了许多挑战。以 VLSI为基础的电子信息产业的发展,对我国国民经济的发展、产业技术创新能力的提高以及现代国防建设都具有极其重要的意义。&lt;/p>
&lt;p>物理设计是VLSI构建流程中最为耗时的,其设计好坏将影响芯片的最终性能,包括时延特性,电能消耗、电路稳定性等。&lt;/p>
&lt;p>近年来 ，集成电路领域发展越来越迅猛 ，晶体管数量随集成电路制造⼯艺发展逐年增加 ，芯片内包含的逻辑门数量急剧提升 ，这给集成电路设计带来了巨大的难题。由于超大规模集成电路（very-largescale integration circuit，VLSI）逻辑的高度复杂性 ，其物理设计往往需要使用计算机辅助设计⼯具来完成。这就向电子设计自动化（electronic design automation，EDA）⼯具提出了严峻挑战&lt;/p>
&lt;p>在物理设计过程中 ，布线是极其重要的一环 。布线⼯作占据了 EDA 过程的&lt;strong>大部分时间&lt;/strong> ，甚至在大部分情况下 ，自动布线的结果还需要设计人员在&lt;strong>后期手⼯调整&lt;/strong>。具备优秀的布线速度及高布线质量的布线器对缩短芯片设计周期有着至关重要的作用 。&lt;/p>
&lt;h1 id="布线">
 布线
 &lt;a class="anchor" href="#%e5%b8%83%e7%ba%bf">#&lt;/a>
&lt;/h1>
&lt;p>在物理设计中需要采用&lt;strong>电路划分&lt;/strong>方法将复杂庞大的电路系统分解至合理小的电路子系统;其次,在电路划分后,&lt;strong>布图规划&lt;/strong>和&lt;strong>布局&lt;/strong>步骤则是将不同形状和大小的单元或模块合理地放置到芯片的不同布线区域,同时满足芯片固有的一些相关几何约束;再次,布局阶段确定模块和引脚各自的位置,在此基础上经&lt;strong>总体布线&lt;/strong>后,将每条待绕线的线网的各部分合理分配到芯片中的各个布线通道区;最后,由&lt;strong>详细布线&lt;/strong>得到各个布线通道区的实际绕线。&lt;/p>
&lt;h2 id="模型输入输出">
 模型输入输出
 &lt;a class="anchor" href="#%e6%a8%a1%e5%9e%8b%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba">#&lt;/a>
&lt;/h2>
&lt;h3 id="输入">
 输入
 &lt;a class="anchor" href="#%e8%be%93%e5%85%a5">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>cell, pin&amp;rsquo;s position&lt;/li>
&lt;li>netlist graph(connection relation)&lt;/li>
&lt;li>设计工艺：多少层，via几何形状信息，各种drc&lt;/li>
&lt;li>部分关键线网延时信息&lt;/li>
&lt;li>wire和via的电气特性&lt;/li>
&lt;/ul>
&lt;h3 id="输出">
 输出
 &lt;a class="anchor" href="#%e8%be%93%e5%87%ba">#&lt;/a>
&lt;/h3>
&lt;p>一个尽可能满足约束条件并更少得需要人⼯调整线网的布线结果&lt;/p></description></item><item><title>Synthesis</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Synthesis/synthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Synthesis/synthesis/</guid><description>&lt;h1 id="基本概念">
 基本概念
 &lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>逻辑函数:二级逻辑和多级逻辑。二级逻辑又包含两种 规范式，分别称为与或两级规范形式(sum-of-products two-level form, SOP)和或 与两级规范形式(product-of-sums form, POS)[19]。其中或与形式的第一级均为或 项，第二级均为与项，而与或形式刚好相反。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>AIG&lt;/p>
&lt;ul>
&lt;li>
&lt;p>And-Inverter Graphs)的文件格式的代称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ASCII格式的AIG文件第一行由字符串aag 开始，aag是ASCII AIG的缩写；然后是以空格分隔5个非负整数，分别由M, I, L, O, A 表示。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>M = 最大变量下标 maximum variable index
I = 输入个数 number of inputs
L = 锁存器个数 number of latches
O = 输出个数 number of outputs
A = 与门个数 number of AND gate&lt;/p>
&lt;/li>
&lt;li>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>aag 3 2 0 1 1
2 input 0
4 input 1
6 output 0
6 2 4 AND gate 0 1&amp;amp;2&lt;/p></description></item><item><title>Synthesis</title><link>https://pxgh02.github.io/zh/docs/Digtal/Synthesis/synthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Synthesis/synthesis/</guid><description>&lt;h1 id="基本概念">
 基本概念
 &lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>逻辑函数:二级逻辑和多级逻辑。二级逻辑又包含两种 规范式，分别称为与或两级规范形式(sum-of-products two-level form, SOP)和或 与两级规范形式(product-of-sums form, POS)[19]。其中或与形式的第一级均为或 项，第二级均为与项，而与或形式刚好相反。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>AIG&lt;/p>
&lt;ul>
&lt;li>
&lt;p>And-Inverter Graphs)的文件格式的代称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ASCII格式的AIG文件第一行由字符串aag 开始，aag是ASCII AIG的缩写；然后是以空格分隔5个非负整数，分别由M, I, L, O, A 表示。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>M = 最大变量下标 maximum variable index
I = 输入个数 number of inputs
L = 锁存器个数 number of latches
O = 输出个数 number of outputs
A = 与门个数 number of AND gate&lt;/p>
&lt;/li>
&lt;li>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>aag 3 2 0 1 1
2 input 0
4 input 1
6 output 0
6 2 4 AND gate 0 1&amp;amp;2&lt;/p></description></item><item><title>verify</title><link>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Verify/verify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Digtal/Verify/verify/</guid><description>&lt;h1 id="背景">
 背景
 &lt;a class="anchor" href="#%e8%83%8c%e6%99%af">#&lt;/a>
&lt;/h1>
&lt;p>随着集成电路技术的迅速发展，&lt;code>电迁移（Electromigration, EM）&lt;/code>和&lt;code>热迁移（Thermomigration, TM）&lt;/code>已经成为影响现代集成电路互连线可靠性的两大主要问题。在电子设计自动化（Electronic Design Automation, EDA）的后端设计中，物理验证环节需要对EM和TM产生的&lt;code>应力&lt;/code>进行评估，以确保电路符合可靠性规范。传统的应力计算方法依赖于复杂的&lt;code>偏微分方程（PDE）&lt;/code>求解，&lt;strong>不仅计算量大、耗时长&lt;/strong>，而且在处理大规模电路时往往难以保证精度。&lt;/p>
&lt;h2 id="电迁移electromigration-em">
 &lt;strong>电迁移（Electromigration, EM）&lt;/strong>
 &lt;a class="anchor" href="#%e7%94%b5%e8%bf%81%e7%a7%bbelectromigration-em">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>由于电子流动引起的现象&lt;/li>
&lt;li>当导线中电子快速移动时，电子与&lt;strong>金属原子&lt;/strong>间的动量交换会导致金属原子从阴极向阳极迁移。随着时间的推移，这种迁移会导致导线中的&lt;code>空洞（voids）&lt;/code>或&lt;code>突起（hillocks）&lt;/code>，这种金属的&lt;strong>分布不均&lt;/strong>导致了应力的产生。当应力达到一定阈值时，会导致&lt;strong>导线断裂或短路&lt;/strong>，从而影响电路的&lt;strong>可靠性&lt;/strong>，最终引发电路失效。&lt;/li>
&lt;li>VLSI: 这种现象在&lt;strong>小尺寸&lt;/strong>导线和高电流密度条件下尤为显著，特别是在&lt;strong>纳米尺度的VLSI系统&lt;/strong>中。&lt;/li>
&lt;li>
 &lt;img src="https://pxgh02.github.io/image-20241220135603117.png" alt="image-20241220135603117" />&lt;/li>
&lt;/ul>
&lt;h2 id="热迁移thermomigration-tm">
 &lt;strong>热迁移（Thermomigration, TM）&lt;/strong>
 &lt;a class="anchor" href="#%e7%83%ad%e8%bf%81%e7%a7%bbthermomigration-tm">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>由导线中的&lt;strong>温度梯度&lt;/strong>引起&lt;/li>
&lt;li>当导线的不同区域存在&lt;strong>温度差异&lt;/strong>时，高温区的金属原子会向低温区移动，这同样会导致&lt;strong>导线中的应力积累和材料变形&lt;/strong>&lt;/li>
&lt;li>VLSI: 随着半导体工艺的进步，集成电路的功率密度逐渐增大，热效应越来越严重，热迁移问题成为影响导线可靠性的重要因素。&lt;/li>
&lt;/ul>
&lt;h1 id="相关研究">
 相关研究
 &lt;a class="anchor" href="#%e7%9b%b8%e5%85%b3%e7%a0%94%e7%a9%b6">#&lt;/a>
&lt;/h1>
&lt;h2 id="emgraph-first-gnn-dac-2021-gnn-university-of-california">
 
 &lt;a href="https://par.nsf.gov/servlets/purl/10301043">EMGraph-First GNN-DAC-2021-GNN-University of California&lt;/a>
 &lt;a class="anchor" href="#emgraph-first-gnn-dac-2021-gnn-university-of-california">#&lt;/a>
&lt;/h2>
&lt;h3 id="background">
 background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>随着VLSI技术进入纳米级，EM已成为影响芯片可靠性的重要问题。&lt;strong>电迁移主要通过应力来进行描述&lt;/strong>。&lt;strong>传统的电迁移分析方法依赖于复杂的物理模型和数值求解&lt;/strong>，如有限元法，但这些方法&lt;strong>计算成本高且难以扩展至大规模互连结构。&lt;/strong>&lt;/li>
&lt;li>现有的&lt;code>生成对抗网络（GAN）&lt;/code>在固定尺寸的图像上进行预测，但不能很好地适应复杂和&lt;strong>动态变化&lt;/strong>的多段互连电路结构针对这一问题。&lt;code>EMGraph&lt;/code>将多段互连电路结构建模成&lt;strong>图&lt;/strong>结构，在节点和边上&lt;strong>同时进行&lt;/strong>EM应力预测，有效地在多段互连结构上进行电迁移分析。&lt;/li>
&lt;/ul>
&lt;h3 id="contribution">
 contribution
 &lt;a class="anchor" href="#contribution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>transferable knowledg&lt;/li>
&lt;li>first GNN in EM&lt;/li>
&lt;li>A novel graph&lt;code> convolution-decoder structure&lt;/code> is employed&lt;/li>
&lt;/ul>
&lt;h3 id="task">
 Task
 &lt;a class="anchor" href="#task">#&lt;/a>
&lt;/h3>
&lt;p>node-edge regression for EM stress&lt;/p>
&lt;h3 id="data">
 data
 &lt;a class="anchor" href="#data">#&lt;/a>
&lt;/h3>
&lt;p>数据由&lt;code>COMSOL&lt;/code>,&lt;code>SPICE(生成电流密度)&lt;/code>生成&lt;/p>
&lt;p>resulting dataset contains &lt;strong>2500&lt;/strong> unique designs （2125/375）&lt;/p></description></item><item><title>verify</title><link>https://pxgh02.github.io/zh/docs/Digtal/Verify/verify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Digtal/Verify/verify/</guid><description>&lt;h1 id="背景">
 背景
 &lt;a class="anchor" href="#%e8%83%8c%e6%99%af">#&lt;/a>
&lt;/h1>
&lt;p>随着集成电路技术的迅速发展，&lt;code>电迁移（Electromigration, EM）&lt;/code>和&lt;code>热迁移（Thermomigration, TM）&lt;/code>已经成为影响现代集成电路互连线可靠性的两大主要问题。在电子设计自动化（Electronic Design Automation, EDA）的后端设计中，物理验证环节需要对EM和TM产生的&lt;code>应力&lt;/code>进行评估，以确保电路符合可靠性规范。传统的应力计算方法依赖于复杂的&lt;code>偏微分方程（PDE）&lt;/code>求解，&lt;strong>不仅计算量大、耗时长&lt;/strong>，而且在处理大规模电路时往往难以保证精度。&lt;/p>
&lt;h2 id="电迁移electromigration-em">
 &lt;strong>电迁移（Electromigration, EM）&lt;/strong>
 &lt;a class="anchor" href="#%e7%94%b5%e8%bf%81%e7%a7%bbelectromigration-em">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>由于电子流动引起的现象&lt;/li>
&lt;li>当导线中电子快速移动时，电子与&lt;strong>金属原子&lt;/strong>间的动量交换会导致金属原子从阴极向阳极迁移。随着时间的推移，这种迁移会导致导线中的&lt;code>空洞（voids）&lt;/code>或&lt;code>突起（hillocks）&lt;/code>，这种金属的&lt;strong>分布不均&lt;/strong>导致了应力的产生。当应力达到一定阈值时，会导致&lt;strong>导线断裂或短路&lt;/strong>，从而影响电路的&lt;strong>可靠性&lt;/strong>，最终引发电路失效。&lt;/li>
&lt;li>VLSI: 这种现象在&lt;strong>小尺寸&lt;/strong>导线和高电流密度条件下尤为显著，特别是在&lt;strong>纳米尺度的VLSI系统&lt;/strong>中。&lt;/li>
&lt;li>
 &lt;img src="https://pxgh02.github.io/image-20241220135603117.png" alt="image-20241220135603117" />&lt;/li>
&lt;/ul>
&lt;h2 id="热迁移thermomigration-tm">
 &lt;strong>热迁移（Thermomigration, TM）&lt;/strong>
 &lt;a class="anchor" href="#%e7%83%ad%e8%bf%81%e7%a7%bbthermomigration-tm">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>由导线中的&lt;strong>温度梯度&lt;/strong>引起&lt;/li>
&lt;li>当导线的不同区域存在&lt;strong>温度差异&lt;/strong>时，高温区的金属原子会向低温区移动，这同样会导致&lt;strong>导线中的应力积累和材料变形&lt;/strong>&lt;/li>
&lt;li>VLSI: 随着半导体工艺的进步，集成电路的功率密度逐渐增大，热效应越来越严重，热迁移问题成为影响导线可靠性的重要因素。&lt;/li>
&lt;/ul>
&lt;h1 id="相关研究">
 相关研究
 &lt;a class="anchor" href="#%e7%9b%b8%e5%85%b3%e7%a0%94%e7%a9%b6">#&lt;/a>
&lt;/h1>
&lt;h2 id="emgraph-first-gnn-dac-2021-gnn-university-of-california">
 
 &lt;a href="https://par.nsf.gov/servlets/purl/10301043">EMGraph-First GNN-DAC-2021-GNN-University of California&lt;/a>
 &lt;a class="anchor" href="#emgraph-first-gnn-dac-2021-gnn-university-of-california">#&lt;/a>
&lt;/h2>
&lt;h3 id="background">
 background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>随着VLSI技术进入纳米级，EM已成为影响芯片可靠性的重要问题。&lt;strong>电迁移主要通过应力来进行描述&lt;/strong>。&lt;strong>传统的电迁移分析方法依赖于复杂的物理模型和数值求解&lt;/strong>，如有限元法，但这些方法&lt;strong>计算成本高且难以扩展至大规模互连结构。&lt;/strong>&lt;/li>
&lt;li>现有的&lt;code>生成对抗网络（GAN）&lt;/code>在固定尺寸的图像上进行预测，但不能很好地适应复杂和&lt;strong>动态变化&lt;/strong>的多段互连电路结构针对这一问题。&lt;code>EMGraph&lt;/code>将多段互连电路结构建模成&lt;strong>图&lt;/strong>结构，在节点和边上&lt;strong>同时进行&lt;/strong>EM应力预测，有效地在多段互连结构上进行电迁移分析。&lt;/li>
&lt;/ul>
&lt;h3 id="contribution">
 contribution
 &lt;a class="anchor" href="#contribution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>transferable knowledg&lt;/li>
&lt;li>first GNN in EM&lt;/li>
&lt;li>A novel graph&lt;code> convolution-decoder structure&lt;/code> is employed&lt;/li>
&lt;/ul>
&lt;h3 id="task">
 Task
 &lt;a class="anchor" href="#task">#&lt;/a>
&lt;/h3>
&lt;p>node-edge regression for EM stress&lt;/p>
&lt;h3 id="data">
 data
 &lt;a class="anchor" href="#data">#&lt;/a>
&lt;/h3>
&lt;p>数据由&lt;code>COMSOL&lt;/code>,&lt;code>SPICE(生成电流密度)&lt;/code>生成&lt;/p>
&lt;p>resulting dataset contains &lt;strong>2500&lt;/strong> unique designs （2125/375）&lt;/p></description></item><item><title>writeing</title><link>https://pxgh02.github.io/zh/docs/Other/Other/Writing-PPT-Presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Writing-PPT-Presentation/</guid><description>&lt;h1 id="main-points">
 Main Points
 &lt;a class="anchor" href="#main-points">#&lt;/a>
&lt;/h1>
&lt;ol>
&lt;li>某问题对推动科学发展或工程应用很重要，可通过多篇引用体现；&lt;/li>
&lt;li>现有方法有A、B、C，但它们存在一定缺点；&lt;/li>
&lt;li>本文提出一个新方法X。X是否第一次被提出？带来哪些影响？有无惊人结果？&lt;/li>
&lt;li>和现有方法相比，X在理论和实验中有更强的优势；&lt;/li>
&lt;li>X存在某弱点，我们计划在未来工作中如何改进。&lt;/li>
&lt;/ol>
&lt;h1 id="paper-structure">
 Paper Structure
 &lt;a class="anchor" href="#paper-structure">#&lt;/a>
&lt;/h1>
&lt;h2 id="title">
 Title
 &lt;a class="anchor" href="#title">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>⽤用⼀一句话概括你所做的⼯工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>考虑搜索引擎的影响，包含关键词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以适当地别出⼼心裁&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729171432560.png" alt="image-20240729171432560" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="abstract">
 Abstract
 &lt;a class="anchor" href="#abstract">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>概括&lt;/strong>[Main Points](#Main Points)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用语要简单，让外行能看懂&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免技术术语、数学公式、和技术细节&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不需要标注&lt;strong>引用&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要对工作的新颖性和影响力进行强调；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接在**”In this paper“**后面的一句最重要，它是对全文主要贡献的概括。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常用结构举例：&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729171808437.png" alt="image-20240729171808437" />&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729173951233.png" alt="Nature论文摘要模板" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>更详细地概括[Main Points](#Main Points)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>要点是充分论证你所做⼯工作的必要性和重要性， 要让审稿⼈人认同并迫不及待想往下看&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免技术术语、数学公式、和技术细节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应假定读者不了解本文研究的具体问题，且不知道该问题的相关工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>介绍为什么这是个重要的研究问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工作的创新点(3个及以上)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后一段通常是介绍论文的结构安排，举例&lt;/p>
&lt;pre tabindex="0">&lt;code>The rest of the paper is organized as follows. In Section 2, we discuss previous work on ... In Section 3, we describe ... In Section 4, we show ... In Section 5, we conclude the whole paper.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>突出本文贡献，举例：&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Algorithms/</guid><description>&lt;h1 id="整数规划">
 整数规划
 &lt;a class="anchor" href="#%e6%95%b4%e6%95%b0%e8%a7%84%e5%88%92">#&lt;/a>
&lt;/h1>
&lt;h2 id="举例">
 举例
 &lt;a class="anchor" href="#%e4%b8%be%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241029145234771.png" alt="image-20241029145234771" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241029145359528.png" alt="image-20241029145359528" />&lt;/p>
&lt;h1 id="combinatorial-optimization">
 Combinatorial Optimization
 &lt;a class="anchor" href="#combinatorial-optimization">#&lt;/a>
&lt;/h1>
&lt;p>组合优化问题(COP)&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018112358445.png" alt="image-20241018112358445" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018112605864.png" alt="image-20241018112605864" />&lt;/p>
&lt;h2 id="精确方法和近似方法">
 精确方法和近似方法
 &lt;a class="anchor" href="#%e7%b2%be%e7%a1%ae%e6%96%b9%e6%b3%95%e5%92%8c%e8%bf%91%e4%bc%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113452893.png" alt="image-20241018113452893" />&lt;/p>
&lt;h2 id="常见相关场景问题">
 常见相关场景/问题
 &lt;a class="anchor" href="#%e5%b8%b8%e8%a7%81%e7%9b%b8%e5%85%b3%e5%9c%ba%e6%99%af%e9%97%ae%e9%a2%98">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>TSP&lt;/p>
&lt;p>给定一系列城市和每对城市之间的距离，求解访问每座城市一次并回到起始城市的最短回路&lt;/p>
&lt;/li>
&lt;li>
&lt;p>VRP&lt;/p>
&lt;p>给定一组客户点、车辆容量、车辆数量、起始点和终点，目标是找到使得所有客户点都被访问一次的最短路径方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MVC(最小顶点覆盖问题)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MDS(最小支配集)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MIS(最大独立集)&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018164450384.png" alt="image-20241018164450384" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>背包问题&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018132543551.png" alt="image-20241018132543551" />&lt;/p>
&lt;h2 id="heuristic-algorithm">
 Heuristic algorithm
 &lt;a class="anchor" href="#heuristic-algorithm">#&lt;/a>
&lt;/h2>
&lt;h3 id="sa">
 SA
 &lt;a class="anchor" href="#sa">#&lt;/a>
&lt;/h3>
&lt;p>Simulated Annealing&lt;/p>
&lt;h3 id="ga">
 GA
 &lt;a class="anchor" href="#ga">#&lt;/a>
&lt;/h3>
&lt;p>Genetic Algorithm&lt;/p>
&lt;h3 id="ge">
 GE
 &lt;a class="anchor" href="#ge">#&lt;/a>
&lt;/h3>
&lt;p>Grammatical Evolution&lt;/p>
&lt;h2 id="基于nn和dl的方法">
 基于NN和DL的方法
 &lt;a class="anchor" href="#%e5%9f%ba%e4%ba%8enn%e5%92%8cdl%e7%9a%84%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="分类">
 分类
 &lt;a class="anchor" href="#%e5%88%86%e7%b1%bb">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018122106575.png" alt="image-20241018122106575" />&lt;/p>
&lt;h3 id="特点">
 特点
 &lt;a class="anchor" href="#%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;h4 id="优点">
 优点
 &lt;a class="anchor" href="#%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113533415.png" alt="image-20241018113533415" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113547534.png" alt="image-20241018113547534" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018115539708.png" alt="image-20241018115539708" />&lt;/p>
&lt;h4 id="缺点">
 缺点
 &lt;a class="anchor" href="#%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018115428936.png" alt="image-20241018115428936" />&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/git/</guid><description>&lt;h1 id="基本指令">
 基本指令
 &lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%8c%87%e4%bb%a4">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240829133816554.png" alt="image-20240829133816554" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>add&lt;/code>：将工作区中的更改添加到本地暂存区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>commit&lt;/code>：将本地暂存区中的更改提交到地仓库，创建一个新的提交。 主要完成的内容就是创建一个新的提交，包括暂存区中的所有更改；每个提交都有一个唯一的哈希值，用于在版本历史中标识该提交。提交时，可以提供一条有意义的提交消息来描述更改的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>checkout&lt;/code>：用于在本地仓库中切换分支或恢复历史版本。 主要操作是将Git版本库中的内容拿到工作区。例如回退版本，连续两天提交了版本，第三天的时候，想要将工作区的内容回退到第一天提交的版本，就需要checkout操作回退版本。 或者从一个分支切换到另一个分支，分支的概念看下文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>clone&lt;/code>：克隆远程仓库到本地，创建一个本地仓库的副本。 克隆操作其实就是一个粘贴复制，把远程的仓库完整的拷贝到本地仓库；通常是包含两步：&lt;/p>
&lt;ul>
&lt;li>创建本地仓库：首先，在本地创建一个新的空白目录或指定已存在的目录作为本地仓库。这一步是为了给克隆的项目提供一个位置，用于存储远程仓库的内容和版本历史。&lt;/li>
&lt;li>克隆仓库：使用&lt;code>git clone&lt;/code>命令，将远程仓库的内容复制到本地仓库中。克隆操作会自动将远程仓库的全部历史记录、分支信息和文件复制到新创建的本地仓库目录中，并为远程仓库设置一个别名（默认为“origin”）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>push&lt;/code>：将本地仓库中的更改推送至远程仓库。 将本地的提交推送到远程仓库，更新远程仓库的分支和提交历史。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>pull&lt;/code>：从远程仓库拉取最新更改（相当于&lt;code>fetch&lt;/code> + &lt;code>merge&lt;/code>）。 其实也是两步；更新是从远程仓库（remote repository）到本地仓库（local repository），但实际的合并操作是将更改从本地仓库合并到工作区（working directory）和本地仓库的当前分支。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="创建版本库">
 创建版本库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e7%89%88%e6%9c%ac%e5%ba%93">#&lt;/a>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git 仓库是用于版本控制的一个特殊目录（&lt;code>.git&lt;/code>目录），它保存了项目的完整历史记录和元数据信息&lt;/p>
&lt;p>每当您在项目中添加、修改或删除文件时，Git 都会创建一个新的备份，称为提交（&lt;code>commit&lt;/code>）。提交是代码修改的快照，并包含了作者、时间戳以及相关的元数据信息。&lt;/p>
&lt;p>通过这些提交，Git 可以帮助您追踪项目历史，查看特定版本的代码状态，甚至回滚到之前的某个状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.git/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── HEAD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── branches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config	&lt;span style="color:#75715e">#包含了Git 仓库的配置选项，例如用户名、邮箱等。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── description
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── hooks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── applypatch-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── commit-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── fsmonitor-watchman.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── post-update.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-applypatch.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-commit.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-merge-commit.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-push.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-rebase.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── pre-receive.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── prepare-commit-msg.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── update.sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── exclude
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── objects
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── pack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── refs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── heads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── tags
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="分支">
 分支
 &lt;a class="anchor" href="#%e5%88%86%e6%94%af">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240829134404593.png" alt="image-20240829134404593" />&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Hardware/</guid><description>&lt;h1 id="综述">
 综述
 &lt;a class="anchor" href="#%e7%bb%bc%e8%bf%b0">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232132033.png" alt="image-20250205232132033" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232142292.png" alt="image-20250205232142292" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235817697.png" alt="image-20250205235817697" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235828836.png" alt="image-20250205235828836" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235842773.png" alt="image-20250205235842773" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235955485.png" alt="image-20250205235955485" />&lt;/p>
&lt;h1 id="cpu">
 CPU
 &lt;a class="anchor" href="#cpu">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232228476.png" alt="image-20250205232228476" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232544143.png" alt="image-20250205232544143" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241024104223498.png" alt="image-20241024104223498" />&lt;/p>
&lt;h2 id="cpu类型">
 CPU类型
 &lt;a class="anchor" href="#cpu%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232814720.png" alt="image-20250205232814720" />&lt;/p>
&lt;p>&lt;strong>复杂指令集(CISC)&lt;/strong>: x86, Zen&lt;/p>
&lt;p>&lt;strong>精简指令集(RISC)&lt;/strong>：ARM，MIPS, PowerPC&lt;/p>
&lt;ul>
&lt;li>针对性更强，可以根据不同的需求进行专门的优化，能效更高&lt;/li>
&lt;li>调用速度快&lt;/li>
&lt;li>服务器上往往使用RISC&lt;/li>
&lt;li>服务器CPU往往应用了最先进的工艺和技术，并且配备了一二三级缓存，运行能力更强，服务器CPU很早就用上了3级缓存，普通cpu是近几年才用上了缓存技术&lt;/li>
&lt;/ul>
&lt;h3 id="arm">
 ARM
 &lt;a class="anchor" href="#arm">#&lt;/a>
&lt;/h3>
&lt;p>是一个**32位精简指令集（RISC）**处理器架构&lt;/p>
&lt;p>优势：&lt;strong>价格低；能耗低&lt;/strong>&lt;/p>
&lt;p>由于&lt;strong>节能&lt;/strong>的特点，ARM处理器非常适用于行动通讯领域，符合其主要设计目标为低耗电的特性。&lt;/p>
&lt;p>其广泛地使用在许多
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%b5%8c%e5%85%a5%e5%bc%8f%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1&amp;amp;zhida_source=entity">嵌入式系统设计&lt;/a>。&lt;/p>
&lt;h3 id="x86atom">
 x86/Atom
 &lt;a class="anchor" href="#x86atom">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>x86&lt;/code>是英代尔Intel首先开发制造的一种
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84&amp;amp;zhida_source=entity">微处理器体系结构&lt;/a>的泛称。
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=x86%e6%9e%b6%e6%9e%84&amp;amp;zhida_source=entity">x86架构&lt;/a>是重要地&lt;strong>可变指令长度&lt;/strong>的CISC（复杂指令集电脑，Complex Instruction Set Computer）。&lt;/p>
&lt;p>Intel &lt;code>Atom&lt;/code>（中文：凌动，开发代号：Silverthorne）是Intel的一个
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e8%b6%85%e4%bd%8e%e7%94%b5%e5%8e%8b%e5%a4%84%e7%90%86%e5%99%a8&amp;amp;zhida_source=entity">超低电压处理器&lt;/a>系列&lt;/p>
&lt;h3 id="mips">
 MIPS
 &lt;a class="anchor" href="#mips">#&lt;/a>
&lt;/h3>
&lt;p>一种
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=RISC%e5%a4%84%e7%90%86%e5%99%a8&amp;amp;zhida_source=entity">RISC处理器&lt;/a>&lt;/p>
&lt;h2 id="核心和线程">
 核心和线程
 &lt;a class="anchor" href="#%e6%a0%b8%e5%bf%83%e5%92%8c%e7%ba%bf%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>CPU可以想象成是一个银行，CPU核心就相当于柜员，而线程数就相当于开通了几个窗口，柜员和窗口越多，那么同时办理的业务就越多，速度也就越快。&lt;/p>
&lt;p>通常情况下，一个柜员对应的是一个窗口，通过超线程技术相当于一个柜员管理着两个窗口，使用左右手同时办理两个窗口的业务，大大提高了核心的使用效率，增加了办理业务的速度。&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看物理 cpu 数：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /proc/cpuinfo| grep &lt;span style="color:#e6db74">&amp;#34;physical id&amp;#34;&lt;/span>| sort| uniq| wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看每个物理 cpu 中 核心数(core 数)：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /proc/cpuinfo | grep &lt;span style="color:#e6db74">&amp;#34;cpu cores&amp;#34;&lt;/span> | uniq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看总的逻辑 cpu 数（processor 数）：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /proc/cpuinfo| grep &lt;span style="color:#e6db74">&amp;#34;processor&amp;#34;&lt;/span>| wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看 cpu 型号：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#判断 cpu 是否 64 位：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#检查 cpuinfo 中的 flags 区段，看是否有 lm （long mode） 标识&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>2&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/linux/</guid><description>&lt;h1 id="sh脚本">
 .sh脚本
 &lt;a class="anchor" href="#sh%e8%84%9a%e6%9c%ac">#&lt;/a>
&lt;/h1>
&lt;h2 id="shebang开头特殊行">
 shebang开头特殊行
 &lt;a class="anchor" href="#shebang%e5%bc%80%e5%a4%b4%e7%89%b9%e6%ae%8a%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;p>这行告诉系统应该使用哪个解释器来执行脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#!&lt;/code> 是shebang的标识符，后面跟着解释器的路径&lt;/p>
&lt;p>对于Python脚本&lt;code>#!/usr/bin/env python3&lt;/code>.使用 &lt;code>/usr/bin/env&lt;/code> 是为了确保系统能够在任何安装了Python的位置找到Python解释器，而不是硬编码路径。&lt;/p>
&lt;h2 id="设置参数">
 设置参数
 &lt;a class="anchor" href="#%e8%ae%be%e7%bd%ae%e5%8f%82%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>verisim&lt;span style="color:#f92672">=&lt;/span>/home/public/software/verisim/bin/verisim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;--case&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		Case&lt;span style="color:#f92672">=&lt;/span>$2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		echo &lt;span style="color:#e6db74">&amp;#34;Error! No case at provided after --case&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	echo &lt;span style="color:#e6db74">&amp;#34;run without appoint testcase&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_2000_2000_100.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_1000_1000_50.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_500_500_50.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_200_200_20.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_100_100_20.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_40_40_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_30_30_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_20_20_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Case&lt;span style="color:#f92672">=&lt;/span>../testcase/gate_20_20_5.v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export Case
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#设为环境变量，这样就可以在代码里面获得，eg: char *env_name = getenv(&amp;#34;Case&amp;#34;); //get case from env_var&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#以下是关于这个项目的编译的相关指令，无关&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CFile&lt;span style="color:#f92672">=&lt;/span>setUpSystemFunc_verisim.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PliMap&lt;span style="color:#f92672">=&lt;/span>../code/systf.tab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf verisim_history.db verisim.env verisim.db verisim_work verisim.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">${&lt;/span>verisim&lt;span style="color:#e6db74">}&lt;/span> +acc+c &lt;span style="color:#e6db74">${&lt;/span>Case&lt;span style="color:#e6db74">}&lt;/span> -P &lt;span style="color:#e6db74">${&lt;/span>PliMap&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>CFile&lt;span style="color:#e6db74">}&lt;/span> -no-mold
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf verisim_history.zdb verisim.env verisim.zdb verisim_work verisim.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#eg:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./run.sh --case ../testcase/gate_100_100_20.v 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="输出重定向">
 输出重定向
 &lt;a class="anchor" href="#%e8%be%93%e5%87%ba%e9%87%8d%e5%ae%9a%e5%90%91">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;/blockquote>
&lt;h2 id="循环">
 循环
 &lt;a class="anchor" href="#%e5%be%aa%e7%8e%af">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>IVERILOG_PATH/bin:&lt;span style="color:#e6db74">${&lt;/span>PATH&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VPI&lt;span style="color:#f92672">=&lt;/span>myvpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个包含所有测试案例的数组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cases&lt;span style="color:#f92672">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/test.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_20_20_5.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_20_20_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_30_30_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_40_40_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_100_100_20.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_200_200_20.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_500_500_50.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_1000_1000_50.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 循环遍历所有的测试案例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> Case in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>cases[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Running case: &lt;/span>$Case&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 清理之前的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf *.vvp *.vpi obj_dir *.o myvpi.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 触摸VPI的C文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 编译Verilog文件和VPI文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iverilog &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$Case&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -o testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iverilog-vpi -L. &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c ./setUpSystemFunc_iverilog.cpp ./loopchecker.h -o testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 运行模拟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vvp -M. -m &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span> testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 清理生成的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf *.vvp *.vpi obj_dir *.o &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;All cases have been run.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="提升权限直接运行">
 提升权限直接运行
 &lt;a class="anchor" href="#%e6%8f%90%e5%8d%87%e6%9d%83%e9%99%90%e7%9b%b4%e6%8e%a5%e8%bf%90%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看脚本权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls -l yourscript.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#改变权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod +x yourscript.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">755&lt;/span> yourscript.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7 代表 rwx（读、写、执行）
6 代表 rw-（读、写）
5 代表 r-x（读、执行）
4 代表 r&amp;ndash;（读）&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Literature/</guid><description>&lt;h1 id="喜剧">
 喜剧
 &lt;a class="anchor" href="#%e5%96%9c%e5%89%a7">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>夏洛特烦恼&lt;/li>
&lt;li>年会不能停&lt;/li>
&lt;li>三傻大闹宝莱坞&lt;/li>
&lt;/ul>
&lt;h2 id="无厘头">
 无厘头
 &lt;a class="anchor" href="#%e6%97%a0%e5%8e%98%e5%a4%b4">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>欧洲性旅行&lt;/li>
&lt;/ul>
&lt;h2 id="情景喜剧">
 情景喜剧
 &lt;a class="anchor" href="#%e6%83%85%e6%99%af%e5%96%9c%e5%89%a7">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>生活大爆炸&lt;/li>
&lt;li>爱情公寓(1-4s)&lt;/li>
&lt;li>老友记&lt;/li>
&lt;li>请回答1988&lt;/li>
&lt;li>是，大臣&lt;/li>
&lt;li>是，首相&lt;/li>
&lt;li>笑傲江湖&lt;/li>
&lt;li>龙门镖局&lt;/li>
&lt;li>IT狂人&lt;/li>
&lt;/ul>
&lt;h1 id="科幻">
 科幻
 &lt;a class="anchor" href="#%e7%a7%91%e5%b9%bb">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>星际穿越&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三体&lt;/p>
&lt;/li>
&lt;li>
&lt;p>彗星来的那一夜&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Moon&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安德的游戏&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="文艺剧情">
 文艺/剧情
 &lt;a class="anchor" href="#%e6%96%87%e8%89%ba%e5%89%a7%e6%83%85">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>走走停停&lt;/li>
&lt;li>万箭穿心&lt;/li>
&lt;li>天下无贼&lt;/li>
&lt;li>漫长的季节&lt;/li>
&lt;li>小巷人家&lt;/li>
&lt;li>心灵捕手&lt;/li>
&lt;li>时空恋旅人&lt;/li>
&lt;li>爆裂鼓手&lt;/li>
&lt;li>大佛普拉斯&lt;/li>
&lt;li>同学麦娜丝&lt;/li>
&lt;li>搏击俱乐部&lt;/li>
&lt;li>风平浪静&lt;/li>
&lt;li>错会半生&lt;/li>
&lt;li>那山那人那狗&lt;/li>
&lt;li>大象席地而坐&lt;/li>
&lt;li>心灵捕手&lt;/li>
&lt;li>破·地狱（The Last Dance）&lt;/li>
&lt;li>超市夜未眠&lt;/li>
&lt;li>何以为家&lt;/li>
&lt;/ul>
&lt;h1 id="悬疑">
 悬疑
 &lt;a class="anchor" href="#%e6%82%ac%e7%96%91">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>福尔摩斯探案集&lt;/li>
&lt;li>神探夏洛克&lt;/li>
&lt;li>看不见的客人&lt;/li>
&lt;li>消失的爱人&lt;/li>
&lt;li>利刃出鞘&lt;/li>
&lt;li>因果报应&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h1 id="历史社会生活">
 历史/社会/生活
 &lt;a class="anchor" href="#%e5%8e%86%e5%8f%b2%e7%a4%be%e4%bc%9a%e7%94%9f%e6%b4%bb">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>霸王别姬&lt;/li>
&lt;li>泰坦尼克号&lt;/li>
&lt;li>红高粱&lt;/li>
&lt;li>我不是药神&lt;/li>
&lt;li>茶馆&lt;/li>
&lt;li>活着&lt;/li>
&lt;li>山河故人&lt;/li>
&lt;/ul></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/makefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/makefile/</guid><description>&lt;h1 id="makefile">
 Makefile
 &lt;a class="anchor" href="#makefile">#&lt;/a>
&lt;/h1>
&lt;p>&lt;strong>xxx.mk&lt;/strong> 文件或者 &lt;strong>Makefile&lt;/strong> 都统称为 Makefile 脚本文件&lt;/p>
&lt;p>功能：指导 Make 软件控制 arm-gcc 等工具链去编译工程文件最终得到可执行文件&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240831224125900.png" alt="image-20240831224125900" />&lt;/p>
&lt;h2 id="基础规则">
 基础规则
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e8%a7%84%e5%88%99">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>目标：依赖条件
	命令	
&lt;/code>&lt;/pre>&lt;p>&lt;strong>拓展&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#根据工作原理，如果只改变其中一个文件，就只会编译这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">hello&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp printhello.cpp factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	g++ -o hello main.cpp printhello.cpp factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#使用变量CXX、TARGET 、OBJ，同时采用不同的依赖分别编译
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#根据工作原理，如果只改变其中一个文件，就只会编译这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OBJ &lt;span style="color:#f92672">=&lt;/span> main.o printhello.o factorial.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">##.mk-V2: ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#makefile 默认第一个目标文件为终极目标，生成就跑路，这时候可以用 ALL 来指定终极目标。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OBJ &lt;span style="color:#f92672">=&lt;/span> main.o printhello.o factorial.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>OBJ&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V3: wildcard &amp;amp; patsubst 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./*.c&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#75715e">#匹配当前工作目录下的所有.c 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.c, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># 将参数 3 中，包含参数 1 的部分，替换为参数 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">###
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V4: clean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./*.c&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#75715e">#匹配当前工作目录下的所有.c 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.c, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># 将参数 3 中，包含参数 1 的部分，替换为参数 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">###
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> -o &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#75715e"># “-” ：作用是，删除不存在文件时，不报错。顺序执行结束。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V5: 三个自动变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">$@&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示规则中的目标。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$^&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示所有依赖条件。组成一个列表，以空格隔开，如果这个列表中有重复项，则去重
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">$&amp;lt;&lt;/span>	&lt;span style="color:#75715e"># 在规则的命令中，表示第一个依赖条件。如果将该变量应用在模式规则中，它可将依赖条件列表中的依赖依次取出，套用模式规则。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> main.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printhello.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> printhello.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">factorial.o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> factorial.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V6: 模式规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#要添加一个.cpp文件，不需要在 makefile 里面增加这个文件的 -o 的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">%.o &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V7: 静态模式规则？？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#使用静态模式规则，就是指定模式规则给谁用，这里指定模式规则给 obj 用，以后文件多了，文件集合会有很多个，就需要指定哪个文件集合用什么规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(obj) &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.o : %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V8: 伪目标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#当前文件夹下有 ALL 文件或者 clean 文件时，会导致 makefile 瘫痪，此时使用.PHONY: clean ALL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> clean ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %.cpp, %.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(obj) &lt;/span>&lt;span style="color:#f92672">:&lt;/span> %.o : %.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> -c $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#.mk-V9: 文件分类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#将上述 .cpp 文件都放到 src 目录中，.h 文件都放在 inc 目录中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>CXX &lt;span style="color:#f92672">=&lt;/span> g++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TARGET &lt;span style="color:#f92672">=&lt;/span> hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>wildcard ./src/*.cpp&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst ./src/%.cpp, ./obj/%.o, &lt;span style="color:#66d9ef">$(&lt;/span>src&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inc_path &lt;span style="color:#f92672">=&lt;/span> ./inc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CXXFLAGS &lt;span style="color:#f92672">=&lt;/span> -Wall -c -I&lt;span style="color:#66d9ef">$(&lt;/span>inc_path&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ALL &lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">./obj/%.o &lt;/span>&lt;span style="color:#f92672">:&lt;/span> ./src/%.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>CXXFLAGS&lt;span style="color:#66d9ef">)&lt;/span> $&amp;lt; -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$(TARGET)&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>CXX&lt;span style="color:#66d9ef">)&lt;/span> $^ -o $@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean &lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	-rm -rf &lt;span style="color:#66d9ef">$(&lt;/span>obj&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>TARGET&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> clean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="make-的参数">
 make 的参数
 &lt;a class="anchor" href="#make-%e7%9a%84%e5%8f%82%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>-n：模拟执行 make、 make clean 命令。仅输出执行过程中的命令序列，但并不执行。&lt;/li>
&lt;li>-f：指定文件执行 make 命令。 xxxx.mk&lt;/li>
&lt;li>-j：可以并行构建多个目标，加快构建速度&lt;/li>
&lt;li>&lt;strong>-s&lt;/strong>‌ 或 ‌**&amp;ndash;silent&lt;strong>‌ 或 ‌&lt;/strong>&amp;ndash;quiet**‌：不显示命令。&lt;/li>
&lt;/ul>
&lt;h2 id="makefile-语法">
 Makefile 语法
 &lt;a class="anchor" href="#makefile-%e8%af%ad%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>使用echo进行printf&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/network/</guid><description>&lt;h1 id="基础知识">
 基础知识
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="ip">
 IP
 &lt;a class="anchor" href="#ip">#&lt;/a>
&lt;/h2>
&lt;p>IP地址可唯一标识 IP 网络中的每台设备
每台主机（计算机、网络设备、外围设备）必须具有唯一的地址
网络地址 + 主机地址&lt;/p>
&lt;h2 id="子网掩码">
 子网掩码
 &lt;a class="anchor" href="#%e5%ad%90%e7%bd%91%e6%8e%a9%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;p>区分主机ID和网络ID
举例：当子网掩码=255.255.255.0时：
192.168.100.168（IP地址） = 192.168.1.0 (网络地址) + 0.0.0.168（主机地址）
用网线直接连接 或 通过 HUB（集线器）、普通交换机链接的计算机必须处于同一网络(网络地址) 并且主机地址必须不一样 才能通信。&lt;/p>
&lt;h3 id="如何判断两个主机在同一网段">
 如何判断两个主机在同一网段
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e4%b8%a4%e4%b8%aa%e4%b8%bb%e6%9c%ba%e5%9c%a8%e5%90%8c%e4%b8%80%e7%bd%91%e6%ae%b5">#&lt;/a>
&lt;/h3>
&lt;p>假设有两个主机A和B，它们的IP地址和子网掩码如下：&lt;/p>
&lt;p>主机A的IP地址：192.168.1.2&lt;/p>
&lt;p>主机A的子网掩码：255.255.255.0&lt;/p>
&lt;p>主机B的IP地址：192.168.1.5&lt;/p>
&lt;p>主机B的子网掩码：255.255.255.0&lt;/p>
&lt;p>步骤1：应用子网掩码
对于主机A：&lt;/p>
&lt;p>IP地址：192.168.1.2 转换为二进制是 11000000.10101000.00000001.00000010
子网掩码：255.255.255.0 转换为二进制是 11111111.11111111.11111111.00000000
进行AND运算：&lt;/p>
&lt;p>11000000.10101000.00000001.00000010 (IP地址)
11111111.11111111.11111111.00000000 (子网掩码)
11000000.10101000.00000001.00000000 (网络地址)
转换回十进制，网络地址为：192.168.1.0&lt;/p>
&lt;p>对于主机B：&lt;/p>
&lt;p>IP地址：192.168.1.5 转换为二进制是 11000000.10101000.00000001.00000101
子网掩码：255.255.255.0 转换为二进制是 11111111.11111111.11111111.00000000
进行AND运算：&lt;/p>
&lt;p>11000000.10101000.00000001.00000101 (IP地址)
11111111.11111111.11111111.00000000 (子网掩码)
11000000.10101000.00000001.00000000 (网络地址)
转换回十进制，网络地址为：192.168.1.0&lt;/p>
&lt;p>步骤2：比较网络地址
由于两个主机的网络地址都是192.168.1.0，因此它们在同一网段。&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Algorithms/</guid><description>&lt;h1 id="整数规划">
 整数规划
 &lt;a class="anchor" href="#%e6%95%b4%e6%95%b0%e8%a7%84%e5%88%92">#&lt;/a>
&lt;/h1>
&lt;h2 id="举例">
 举例
 &lt;a class="anchor" href="#%e4%b8%be%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241029145234771.png" alt="image-20241029145234771" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241029145359528.png" alt="image-20241029145359528" />&lt;/p>
&lt;h1 id="combinatorial-optimization">
 Combinatorial Optimization
 &lt;a class="anchor" href="#combinatorial-optimization">#&lt;/a>
&lt;/h1>
&lt;p>组合优化问题(COP)&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018112358445.png" alt="image-20241018112358445" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018112605864.png" alt="image-20241018112605864" />&lt;/p>
&lt;h2 id="精确方法和近似方法">
 精确方法和近似方法
 &lt;a class="anchor" href="#%e7%b2%be%e7%a1%ae%e6%96%b9%e6%b3%95%e5%92%8c%e8%bf%91%e4%bc%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113452893.png" alt="image-20241018113452893" />&lt;/p>
&lt;h2 id="常见相关场景问题">
 常见相关场景/问题
 &lt;a class="anchor" href="#%e5%b8%b8%e8%a7%81%e7%9b%b8%e5%85%b3%e5%9c%ba%e6%99%af%e9%97%ae%e9%a2%98">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>TSP&lt;/p>
&lt;p>给定一系列城市和每对城市之间的距离，求解访问每座城市一次并回到起始城市的最短回路&lt;/p>
&lt;/li>
&lt;li>
&lt;p>VRP&lt;/p>
&lt;p>给定一组客户点、车辆容量、车辆数量、起始点和终点，目标是找到使得所有客户点都被访问一次的最短路径方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MVC(最小顶点覆盖问题)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MDS(最小支配集)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MIS(最大独立集)&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018164450384.png" alt="image-20241018164450384" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>背包问题&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018132543551.png" alt="image-20241018132543551" />&lt;/p>
&lt;h2 id="heuristic-algorithm">
 Heuristic algorithm
 &lt;a class="anchor" href="#heuristic-algorithm">#&lt;/a>
&lt;/h2>
&lt;h3 id="sa">
 SA
 &lt;a class="anchor" href="#sa">#&lt;/a>
&lt;/h3>
&lt;p>Simulated Annealing&lt;/p>
&lt;h3 id="ga">
 GA
 &lt;a class="anchor" href="#ga">#&lt;/a>
&lt;/h3>
&lt;p>Genetic Algorithm&lt;/p>
&lt;h3 id="ge">
 GE
 &lt;a class="anchor" href="#ge">#&lt;/a>
&lt;/h3>
&lt;p>Grammatical Evolution&lt;/p>
&lt;h2 id="基于nn和dl的方法">
 基于NN和DL的方法
 &lt;a class="anchor" href="#%e5%9f%ba%e4%ba%8enn%e5%92%8cdl%e7%9a%84%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="分类">
 分类
 &lt;a class="anchor" href="#%e5%88%86%e7%b1%bb">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018122106575.png" alt="image-20241018122106575" />&lt;/p>
&lt;h3 id="特点">
 特点
 &lt;a class="anchor" href="#%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;h4 id="优点">
 优点
 &lt;a class="anchor" href="#%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113533415.png" alt="image-20241018113533415" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018113547534.png" alt="image-20241018113547534" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018115539708.png" alt="image-20241018115539708" />&lt;/p>
&lt;h4 id="缺点">
 缺点
 &lt;a class="anchor" href="#%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241018115428936.png" alt="image-20241018115428936" />&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Hardware/</guid><description>&lt;h1 id="综述">
 综述
 &lt;a class="anchor" href="#%e7%bb%bc%e8%bf%b0">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232132033.png" alt="image-20250205232132033" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232142292.png" alt="image-20250205232142292" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235817697.png" alt="image-20250205235817697" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235828836.png" alt="image-20250205235828836" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235842773.png" alt="image-20250205235842773" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205235955485.png" alt="image-20250205235955485" />&lt;/p>
&lt;h1 id="cpu">
 CPU
 &lt;a class="anchor" href="#cpu">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232228476.png" alt="image-20250205232228476" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232544143.png" alt="image-20250205232544143" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20241024104223498.png" alt="image-20241024104223498" />&lt;/p>
&lt;h2 id="cpu类型">
 CPU类型
 &lt;a class="anchor" href="#cpu%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250205232814720.png" alt="image-20250205232814720" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250225100046558.png" alt="image-20250225100046558" />&lt;/p>
&lt;p>&lt;strong>复杂指令集(CISC)&lt;/strong>: x86, Zen&lt;/p>
&lt;p>&lt;strong>精简指令集(RISC)&lt;/strong>：ARM，MIPS, PowerPC&lt;/p>
&lt;ul>
&lt;li>针对性更强，可以根据不同的需求进行专门的优化，能效更高&lt;/li>
&lt;li>调用速度快&lt;/li>
&lt;li>服务器上往往使用RISC&lt;/li>
&lt;li>服务器CPU往往应用了最先进的工艺和技术，并且配备了一二三级缓存，运行能力更强，服务器CPU很早就用上了3级缓存，普通cpu是近几年才用上了缓存技术&lt;/li>
&lt;/ul>
&lt;p>与 CISC 相比，RISC 方法有几个优点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>简化硬件实现&lt;/strong>：它简化了处理器的硬件实现，因为需要解码和执行的指令更少。这可加快执行时间，降低功耗。&lt;/li>
&lt;li>&lt;strong>更高的指令级并行性&lt;/strong>：RISC 处理器通常具有更高的指令级并行性，可同时执行多条指令，从而进一步提高性能。&lt;/li>
&lt;li>&lt;strong>简易性&lt;/strong>：RISC 指令集的简易性使得开发可为处理器生成高效代码的编译器和其他软件工具变得更加容易。&lt;/li>
&lt;/ol>
&lt;h3 id="arm">
 ARM
 &lt;a class="anchor" href="#arm">#&lt;/a>
&lt;/h3>
&lt;p>是一个**32位精简指令集（RISC）**处理器架构&lt;/p>
&lt;p>优势：&lt;strong>价格低；能耗低&lt;/strong>&lt;/p>
&lt;p>由于&lt;strong>节能&lt;/strong>的特点，ARM处理器非常适用于行动通讯领域，符合其主要设计目标为低耗电的特性。&lt;/p>
&lt;p>其广泛地使用在许多
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%b5%8c%e5%85%a5%e5%bc%8f%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1&amp;amp;zhida_source=entity">嵌入式系统设计&lt;/a>。&lt;/p>
&lt;h3 id="x86atom">
 x86/Atom
 &lt;a class="anchor" href="#x86atom">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>x86&lt;/code>是英代尔Intel首先开发制造的一种
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84&amp;amp;zhida_source=entity">微处理器体系结构&lt;/a>的泛称。
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=x86%e6%9e%b6%e6%9e%84&amp;amp;zhida_source=entity">x86架构&lt;/a>是重要地&lt;strong>可变指令长度&lt;/strong>的CISC（复杂指令集电脑，Complex Instruction Set Computer）。&lt;/p>
&lt;p>Intel &lt;code>Atom&lt;/code>（中文：凌动，开发代号：Silverthorne）是Intel的一个
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e8%b6%85%e4%bd%8e%e7%94%b5%e5%8e%8b%e5%a4%84%e7%90%86%e5%99%a8&amp;amp;zhida_source=entity">超低电压处理器&lt;/a>系列&lt;/p>
&lt;h3 id="mips">
 MIPS
 &lt;a class="anchor" href="#mips">#&lt;/a>
&lt;/h3>
&lt;p>一种
 &lt;a href="https://zhida.zhihu.com/search?content_id=106234547&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=RISC%e5%a4%84%e7%90%86%e5%99%a8&amp;amp;zhida_source=entity">RISC处理器&lt;/a>（精简指令集）&lt;/p>
&lt;h3 id="risc-v">
 RISC-V
 &lt;a class="anchor" href="#risc-v">#&lt;/a>
&lt;/h3>
&lt;p>&lt;em>RISC-V（读作 risk-five）架构是一种开源指令集架构（ISA），近年来因其灵活性、模块化和可扩展性而备受关注&lt;/em>&lt;/p>
&lt;p>模块化是指将 ISA 划分为不同的独立组件，这些组件可以通过各种方式组合在一起，从而创建一个定制的处理器。另一方面，可扩展性是指在不破坏现有功能的情况下，向 ISA 添加新指令、功能或扩展的能力。&lt;/p>
&lt;h4 id="历史">
 历史
 &lt;a class="anchor" href="#%e5%8e%86%e5%8f%b2">#&lt;/a>
&lt;/h4>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20250225095526450.png" alt="image-20250225095526450" />&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/linux/</guid><description>&lt;h1 id="sh脚本">
 .sh脚本
 &lt;a class="anchor" href="#sh%e8%84%9a%e6%9c%ac">#&lt;/a>
&lt;/h1>
&lt;h2 id="shebang开头特殊行">
 shebang开头特殊行
 &lt;a class="anchor" href="#shebang%e5%bc%80%e5%a4%b4%e7%89%b9%e6%ae%8a%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;p>这行告诉系统应该使用哪个解释器来执行脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#!&lt;/code> 是shebang的标识符，后面跟着解释器的路径&lt;/p>
&lt;p>对于Python脚本&lt;code>#!/usr/bin/env python3&lt;/code>.使用 &lt;code>/usr/bin/env&lt;/code> 是为了确保系统能够在任何安装了Python的位置找到Python解释器，而不是硬编码路径。&lt;/p>
&lt;h2 id="设置参数">
 设置参数
 &lt;a class="anchor" href="#%e8%ae%be%e7%bd%ae%e5%8f%82%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>verisim&lt;span style="color:#f92672">=&lt;/span>/home/public/software/verisim/bin/verisim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;--case&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		Case&lt;span style="color:#f92672">=&lt;/span>$2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		echo &lt;span style="color:#e6db74">&amp;#34;Error! No case at provided after --case&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	echo &lt;span style="color:#e6db74">&amp;#34;run without appoint testcase&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_2000_2000_100.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_1000_1000_50.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_500_500_50.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_200_200_20.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_100_100_20.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_40_40_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_30_30_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">#Case=../testcase/gate_20_20_10.v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Case&lt;span style="color:#f92672">=&lt;/span>../testcase/gate_20_20_5.v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export Case
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#设为环境变量，这样就可以在代码里面获得，eg: char *env_name = getenv(&amp;#34;Case&amp;#34;); //get case from env_var&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#以下是关于这个项目的编译的相关指令，无关&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CFile&lt;span style="color:#f92672">=&lt;/span>setUpSystemFunc_verisim.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PliMap&lt;span style="color:#f92672">=&lt;/span>../code/systf.tab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf verisim_history.db verisim.env verisim.db verisim_work verisim.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">${&lt;/span>verisim&lt;span style="color:#e6db74">}&lt;/span> +acc+c &lt;span style="color:#e6db74">${&lt;/span>Case&lt;span style="color:#e6db74">}&lt;/span> -P &lt;span style="color:#e6db74">${&lt;/span>PliMap&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>CFile&lt;span style="color:#e6db74">}&lt;/span> -no-mold
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf verisim_history.zdb verisim.env verisim.zdb verisim_work verisim.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#eg:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./run.sh --case ../testcase/gate_100_100_20.v 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="输出重定向">
 输出重定向
 &lt;a class="anchor" href="#%e8%be%93%e5%87%ba%e9%87%8d%e5%ae%9a%e5%90%91">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;blockquote>
&lt;/blockquote>&lt;/blockquote>
&lt;h2 id="循环">
 循环
 &lt;a class="anchor" href="#%e5%be%aa%e7%8e%af">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>IVERILOG_PATH/bin:&lt;span style="color:#e6db74">${&lt;/span>PATH&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VPI&lt;span style="color:#f92672">=&lt;/span>myvpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个包含所有测试案例的数组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cases&lt;span style="color:#f92672">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/test.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_20_20_5.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_20_20_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_30_30_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_40_40_10.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_100_100_20.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_200_200_20.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_500_500_50.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;../testcase/gate_1000_1000_50.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 循环遍历所有的测试案例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> Case in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>cases[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Running case: &lt;/span>$Case&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 清理之前的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf *.vvp *.vpi obj_dir *.o myvpi.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 触摸VPI的C文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> touch &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 编译Verilog文件和VPI文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iverilog &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$Case&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -o testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iverilog-vpi -L. &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c ./setUpSystemFunc_iverilog.cpp ./loopchecker.h -o testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 运行模拟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vvp -M. -m &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span> testcase.vvp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 清理生成的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf *.vvp *.vpi obj_dir *.o &lt;span style="color:#e6db74">${&lt;/span>VPI&lt;span style="color:#e6db74">}&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;All cases have been run.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="提升权限直接运行">
 提升权限直接运行
 &lt;a class="anchor" href="#%e6%8f%90%e5%8d%87%e6%9d%83%e9%99%90%e7%9b%b4%e6%8e%a5%e8%bf%90%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#查看脚本权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls -l yourscript.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#改变权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod +x yourscript.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">755&lt;/span> yourscript.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7 代表 rwx（读、写、执行）
6 代表 rw-（读、写）
5 代表 r-x（读、执行）
4 代表 r&amp;ndash;（读）&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Literature/</guid><description>&lt;h1 id="喜剧">
 喜剧
 &lt;a class="anchor" href="#%e5%96%9c%e5%89%a7">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>夏洛特烦恼&lt;/li>
&lt;li>年会不能停&lt;/li>
&lt;li>三傻大闹宝莱坞&lt;/li>
&lt;/ul>
&lt;h2 id="无厘头">
 无厘头
 &lt;a class="anchor" href="#%e6%97%a0%e5%8e%98%e5%a4%b4">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>欧洲性旅行&lt;/li>
&lt;/ul>
&lt;h2 id="情景喜剧">
 情景喜剧
 &lt;a class="anchor" href="#%e6%83%85%e6%99%af%e5%96%9c%e5%89%a7">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>生活大爆炸&lt;/li>
&lt;li>爱情公寓(1-4s)&lt;/li>
&lt;li>老友记&lt;/li>
&lt;li>请回答1988&lt;/li>
&lt;li>是，大臣&lt;/li>
&lt;li>是，首相&lt;/li>
&lt;li>笑傲江湖&lt;/li>
&lt;li>龙门镖局&lt;/li>
&lt;li>IT狂人&lt;/li>
&lt;/ul>
&lt;h1 id="科幻">
 科幻
 &lt;a class="anchor" href="#%e7%a7%91%e5%b9%bb">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>星际穿越&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三体123&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;li>
&lt;p>彗星来的那一夜?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Moon&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安德的游戏&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h1 id="文艺剧情">
 文艺/剧情
 &lt;a class="anchor" href="#%e6%96%87%e8%89%ba%e5%89%a7%e6%83%85">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>走走停停&lt;/li>
&lt;li>万箭穿心&lt;/li>
&lt;li>天下无贼&lt;/li>
&lt;li>漫长的季节&lt;/li>
&lt;li>小巷人家&lt;/li>
&lt;li>心灵捕手&lt;/li>
&lt;li>时空恋旅人&lt;/li>
&lt;li>爆裂鼓手&lt;/li>
&lt;li>大佛普拉斯&lt;/li>
&lt;li>同学麦娜丝&lt;/li>
&lt;li>搏击俱乐部&lt;/li>
&lt;li>风平浪静&lt;/li>
&lt;li>错会半生&lt;/li>
&lt;li>那山那人那狗&lt;/li>
&lt;li>大象席地而坐&lt;/li>
&lt;li>心灵捕手&lt;/li>
&lt;li>破·地狱（The Last Dance）&lt;/li>
&lt;li>超市夜未眠&lt;/li>
&lt;li>何以为家&lt;/li>
&lt;/ul>
&lt;h1 id="悬疑">
 悬疑
 &lt;a class="anchor" href="#%e6%82%ac%e7%96%91">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>福尔摩斯探案集&lt;/li>
&lt;li>神探夏洛克&lt;/li>
&lt;li>看不见的客人&lt;/li>
&lt;li>消失的爱人&lt;/li>
&lt;li>利刃出鞘&lt;/li>
&lt;li>因果报应&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h1 id="历史社会生活">
 历史/社会/生活
 &lt;a class="anchor" href="#%e5%8e%86%e5%8f%b2%e7%a4%be%e4%bc%9a%e7%94%9f%e6%b4%bb">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>霸王别姬&lt;/li>
&lt;li>泰坦尼克号&lt;/li>
&lt;li>红高粱&lt;/li>
&lt;li>我不是药神&lt;/li>
&lt;li>茶馆&lt;/li>
&lt;li>活着&lt;/li>
&lt;li>山河故人&lt;/li>
&lt;/ul></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/network/</guid><description>&lt;h1 id="基础知识">
 基础知识
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="ip">
 IP
 &lt;a class="anchor" href="#ip">#&lt;/a>
&lt;/h2>
&lt;p>IP地址可唯一标识 IP 网络中的每台设备
每台主机（计算机、网络设备、外围设备）必须具有唯一的地址
网络地址 + 主机地址&lt;/p>
&lt;h2 id="子网掩码">
 子网掩码
 &lt;a class="anchor" href="#%e5%ad%90%e7%bd%91%e6%8e%a9%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;p>区分主机ID和网络ID
举例：当子网掩码=255.255.255.0时：
192.168.100.168（IP地址） = 192.168.1.0 (网络地址) + 0.0.0.168（主机地址）
用网线直接连接 或 通过 HUB（集线器）、普通交换机链接的计算机必须处于同一网络(网络地址) 并且主机地址必须不一样 才能通信。&lt;/p>
&lt;h3 id="如何判断两个主机在同一网段">
 如何判断两个主机在同一网段
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e4%b8%a4%e4%b8%aa%e4%b8%bb%e6%9c%ba%e5%9c%a8%e5%90%8c%e4%b8%80%e7%bd%91%e6%ae%b5">#&lt;/a>
&lt;/h3>
&lt;p>假设有两个主机A和B，它们的IP地址和子网掩码如下：&lt;/p>
&lt;p>主机A的IP地址：192.168.1.2&lt;/p>
&lt;p>主机A的子网掩码：255.255.255.0&lt;/p>
&lt;p>主机B的IP地址：192.168.1.5&lt;/p>
&lt;p>主机B的子网掩码：255.255.255.0&lt;/p>
&lt;p>步骤1：应用子网掩码
对于主机A：&lt;/p>
&lt;p>IP地址：192.168.1.2 转换为二进制是 11000000.10101000.00000001.00000010
子网掩码：255.255.255.0 转换为二进制是 11111111.11111111.11111111.00000000
进行AND运算：&lt;/p>
&lt;p>11000000.10101000.00000001.00000010 (IP地址)
11111111.11111111.11111111.00000000 (子网掩码)
11000000.10101000.00000001.00000000 (网络地址)
转换回十进制，网络地址为：192.168.1.0&lt;/p>
&lt;p>对于主机B：&lt;/p>
&lt;p>IP地址：192.168.1.5 转换为二进制是 11000000.10101000.00000001.00000101
子网掩码：255.255.255.0 转换为二进制是 11111111.11111111.11111111.00000000
进行AND运算：&lt;/p>
&lt;p>11000000.10101000.00000001.00000101 (IP地址)
11111111.11111111.11111111.00000000 (子网掩码)
11000000.10101000.00000001.00000000 (网络地址)
转换回十进制，网络地址为：192.168.1.0&lt;/p>
&lt;p>步骤2：比较网络地址
由于两个主机的网络地址都是192.168.1.0，因此它们在同一网段。&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Program/</guid><description>&lt;h1 id="cc">
 C/C++
 &lt;a class="anchor" href="#cc">#&lt;/a>
&lt;/h1>
&lt;h2 id="c-标准">
 c++ 标准
 &lt;a class="anchor" href="#c-%e6%a0%87%e5%87%86">#&lt;/a>
&lt;/h2>
&lt;p>以下是自 &lt;strong>C++11&lt;/strong> 以来各版本 C++ 标准的主要特点和重要改动的总结(AI 生成)：&lt;/p>
&lt;hr>
&lt;h3 id="1-c112011-年">
 &lt;strong>1. C++11（2011 年）&lt;/strong>
 &lt;a class="anchor" href="#1-c112011-%e5%b9%b4">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>现代 C++ 的里程碑&lt;/strong>，引入大量革命性特性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>核心语言&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>auto&lt;/code> &lt;strong>类型推导&lt;/strong>：自动推断变量类型（&lt;code>auto x = 42;&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>右值引用&lt;/strong>（&lt;code>&amp;amp;&amp;amp;&lt;/code>）和 &lt;strong>移动语义&lt;/strong>（&lt;code>std::move&lt;/code>）：优化资源管理，减少拷贝开销。&lt;/li>
&lt;li>&lt;strong>范围 for 循环&lt;/strong>：简化容器遍历（&lt;code>for (auto&amp;amp; x : vec) { ... }&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>Lambda 表达式&lt;/strong>：支持匿名函数（&lt;code>auto f = [](int x) { return x*2; };&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>强类型枚举&lt;/strong>（&lt;code>enum class&lt;/code>）：避免传统枚举的命名冲突。&lt;/li>
&lt;li>&lt;code>nullptr&lt;/code>：替代 &lt;code>NULL&lt;/code>，明确表示空指针。&lt;/li>
&lt;li>&lt;strong>可变参数模板&lt;/strong>（Variadic Templates）：支持任意数量模板参数。&lt;/li>
&lt;li>&lt;code>constexpr&lt;/code>：编译时计算常量表达式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>标准库&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>智能指针&lt;/strong>：&lt;code>std::unique_ptr&lt;/code>, &lt;code>std::shared_ptr&lt;/code>, &lt;code>std::weak_ptr&lt;/code>（自动内存管理）。&lt;/li>
&lt;li>&lt;strong>多线程支持&lt;/strong>：&lt;code>std::thread&lt;/code>, &lt;code>std::mutex&lt;/code>, &lt;code>std::future&lt;/code> 等。&lt;/li>
&lt;li>&lt;strong>正则表达式库&lt;/strong>（&lt;code>&amp;lt;regex&amp;gt;&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>哈希容器&lt;/strong>：&lt;code>std::unordered_map&lt;/code>, &lt;code>std::unordered_set&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-c142014-年">
 &lt;strong>2. C++14（2014 年）&lt;/strong>
 &lt;a class="anchor" href="#2-c142014-%e5%b9%b4">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>C++11 的补充版本&lt;/strong>，优化语言细节：&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/software/</guid><description>&lt;h1 id="pimpl">
 PIMPL
 &lt;a class="anchor" href="#pimpl">#&lt;/a>
&lt;/h1>
&lt;p>(Pointer to Implementation) 设计模式&lt;/p>
&lt;h1 id="opendb">
 OpenDB
 &lt;a class="anchor" href="#opendb">#&lt;/a>
&lt;/h1>
&lt;h1 id="swig">
 SWIG
 &lt;a class="anchor" href="#swig">#&lt;/a>
&lt;/h1></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/Tools/</guid><description>&lt;h1 id="wsl">
 WSL
 &lt;a class="anchor" href="#wsl">#&lt;/a>
&lt;/h1>
&lt;h2 id="cmd">
 cmd
 &lt;a class="anchor" href="#cmd">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl -l -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --shutdown	&lt;span style="color:#75715e">#关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --list --verbose &lt;span style="color:#75715e"># 查看已安装的发行版、WSL 版本信息和当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --export Ubuntu-22.04 e:&lt;span style="color:#ae81ff">\U&lt;/span>buntu-22.04.tar#导出
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --unregister Ubuntu-22.04 &lt;span style="color:#75715e">#注销并卸载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --import Ubuntu-22.04 E:&lt;span style="color:#ae81ff">\u&lt;/span>buntu2204 E:&lt;span style="color:#ae81ff">\U&lt;/span>buntu-22.04.tar#导入
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="环境配置">
 环境配置
 &lt;a class="anchor" href="#%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>windows 设置打开： &lt;strong>适用于 Linux 的 Windows 子系统&lt;/strong> 和 &lt;strong>虚拟机平台&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240915093843416.png" alt="image-20240915093843416" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240915093856560.png" alt="image-20240915093856560" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Linux 内核更新包：https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl --list --verbose &lt;span style="color:#75715e"># 查看已安装的发行版、WSL 版本信息和当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;a href="https://www.sysgeek.cn/install-wsl-2-windows/">Windows 11：WSL 2 安装和管理指南，3 种方法任你选 - 系统极客 (sysgeek.cn)&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://blog.csdn.net/cn_ljr/article/details/132047516">Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移_windows 11 wsl 修改安装位置-CSDN 博客&lt;/a>&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Other/window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Other/window/</guid><description>&lt;h1 id="vscode">
 vscode
 &lt;a class="anchor" href="#vscode">#&lt;/a>
&lt;/h1>
&lt;h2 id="remote-ssh">
 remote-ssh
 &lt;a class="anchor" href="#remote-ssh">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>Host ISMC_Server_106
 HostName your.ip
 Port 22
 User pengxuan
&lt;/code>&lt;/pre>&lt;h1 id="系统重装">
 系统重装
 &lt;a class="anchor" href="#%e7%b3%bb%e7%bb%9f%e9%87%8d%e8%a3%85">#&lt;/a>
&lt;/h1>
&lt;h2 id="下载iso">
 下载ISO
 &lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bdiso">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://techpp.com/2024/09/02/windows-11-iso-download/">Windows 11 ISO Download – Official Direct Download Links - TechPP&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://next.itellyou.cn/Original/">原版软件 (itellyou.cn)&lt;/a>&lt;/p>
&lt;h2 id="制作pe">
 制作PE
 &lt;a class="anchor" href="#%e5%88%b6%e4%bd%9cpe">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://www.bilibili.com/video/BV1Ez421R7iY/?spm_id_from=333.337.search-card.all.click">纯净无广告，又强又趁手的维护工具，FirPE使用和DIY指南_哔哩哔哩_bilibili&lt;/a>&lt;/p>
&lt;p>FirPE:默认,全新制作&lt;/p>
&lt;h2 id="跳过联网">
 跳过联网
 &lt;a class="anchor" href="#%e8%b7%b3%e8%bf%87%e8%81%94%e7%bd%91">#&lt;/a>
&lt;/h2>
&lt;p>（Fn+）Shift+F10快捷键调出命令提示符窗口&lt;/p>
&lt;p>输入：OOBE\BYPASSNRO&lt;/p>
&lt;h2 id="windows激活office激活">
 windows激活&amp;amp;office激活
 &lt;a class="anchor" href="#windows%e6%bf%80%e6%b4%bboffice%e6%bf%80%e6%b4%bb">#&lt;/a>
&lt;/h2>
&lt;p>power shell 下打开输入&lt;code>irm win.zyqq.top | iex&lt;/code>,然后根据提示&lt;/p>
&lt;h2 id="初始化设置">
 初始化设置
 &lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e8%ae%be%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;p>使用dism++&lt;/p>
&lt;h2 id="系统备份及还原方法">
 系统备份及还原方法
 &lt;a class="anchor" href="#%e7%b3%bb%e7%bb%9f%e5%a4%87%e4%bb%bd%e5%8f%8a%e8%bf%98%e5%8e%9f%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://chongzhuang.163987.com/faq/17160.html">win11一键备份还原系统方法_系统之家一键重装系统官网 (163987.com)&lt;/a>&lt;/p>
&lt;h2 id="成为管理员">
 成为管理员
 &lt;a class="anchor" href="#%e6%88%90%e4%b8%ba%e7%ae%a1%e7%90%86%e5%91%98">#&lt;/a>
&lt;/h2>
&lt;h2 id="无法打开windowapps">
 无法打开WindowApps
 &lt;a class="anchor" href="#%e6%97%a0%e6%b3%95%e6%89%93%e5%bc%80windowapps">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://blog.csdn.net/VLOKL/article/details/140148337">【快速解决】WindowsApps拒绝访问的问题_windowsapps文件夹拒绝访问-CSDN博客&lt;/a>&lt;/p>
&lt;h2 id="win11家庭版升级为专业版">
 win11家庭版升级为专业版
 &lt;a class="anchor" href="#win11%e5%ae%b6%e5%ba%ad%e7%89%88%e5%8d%87%e7%ba%a7%e4%b8%ba%e4%b8%93%e4%b8%9a%e7%89%88">#&lt;/a>
&lt;/h2>
&lt;h1 id="cmd指令">
 cmd指令
 &lt;a class="anchor" href="#cmd%e6%8c%87%e4%bb%a4">#&lt;/a>
&lt;/h1>
&lt;pre tabindex="0">&lt;code>D: #进入d盘
cd ..
dir
&lt;/code>&lt;/pre></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Program/</guid><description>&lt;h1 id="cc">
 C/C++
 &lt;a class="anchor" href="#cc">#&lt;/a>
&lt;/h1>
&lt;h2 id="key-word">
 key word
 &lt;a class="anchor" href="#key-word">#&lt;/a>
&lt;/h2>
&lt;h3 id="extern">
 extern
 &lt;a class="anchor" href="#extern">#&lt;/a>
&lt;/h3>
&lt;p>extern可以置于变量或者函数前,以标示变量或者函数的定义在别的文件中,提示编译器遇到此变量和函数时&lt;strong>在其他模块中寻找其定义&lt;/strong>。此外extern也可用来进行链接指定&lt;/p>
&lt;h3 id="register">
 register
 &lt;a class="anchor" href="#register">#&lt;/a>
&lt;/h3>
&lt;h3 id="union">
 union
 &lt;a class="anchor" href="#union">#&lt;/a>
&lt;/h3>
&lt;h3 id="volatile">
 volatile
 &lt;a class="anchor" href="#volatile">#&lt;/a>
&lt;/h3>
&lt;h3 id="c-only-keywords">
 C++ only keywords
 &lt;a class="anchor" href="#c-only-keywords">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240918090732446.png" alt="image-20240918090732446" />&lt;/p>
&lt;h2 id="class">
 class
 &lt;a class="anchor" href="#class">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#75715e">//私有成员只能在类内部访问。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#75715e">//公有成员可以在类外部访问。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//static 关键字可以用于类成员变量或成员函数，表示它们属于类本身，而不是类的某个特定对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> totalPopulation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//构造函数是一种特殊的成员函数，用于初始化对象。它与类同名，没有返回类型，也不返回任何值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Person(string n, &lt;span style="color:#66d9ef">int&lt;/span> a) &lt;span style="color:#f92672">:&lt;/span> name(n), age(a) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> totalPopulation&lt;span style="color:#f92672">++&lt;/span>; &lt;span style="color:#75715e">// 每次创建新对象时增加人数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#75715e">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">display&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {&lt;span style="color:#75715e">//如果你想在派生类中重写基类的虚函数，基类的函数必须被声明为 virtual
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> name &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, Age: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> age &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">friend&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">displayPerson&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> Person &lt;span style="color:#f92672">&amp;amp;&lt;/span>p);&lt;span style="color:#75715e">//友元函数是类外部的函数，可以访问类的私有和保护成员。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//操作符重载
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Person&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">++&lt;/span>() { &lt;span style="color:#75715e">// 前置++
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">++&lt;/span>age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">//操作符重载
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Person &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">++&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) { &lt;span style="color:#75715e">// 后置++
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Person temp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//静态函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">displayTotalPopulation&lt;/span>() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Total population: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> totalPopulation &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">~&lt;/span>Person() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> totalPopulation&lt;span style="color:#f92672">--&lt;/span>; &lt;span style="color:#75715e">// 每次析构对象时减少人数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#75715e">// 析构函数用于在对象生命周期结束时进行清理工作。它与类同名，前面加上 ~，没有参数，也没有返回类型。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> Person&lt;span style="color:#f92672">::&lt;/span>totalPopulation &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">// 静态成员变量的初始化!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">displayPerson&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> Person &lt;span style="color:#f92672">&amp;amp;&lt;/span>p) {&lt;span style="color:#75715e">//友元函数, 在类内声明过了，可以访问类的私有和保护成员。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> p.name &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, Age: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> p.age &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//继承
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Student&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Person {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string school;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Student(string n, &lt;span style="color:#66d9ef">int&lt;/span> a, string s) &lt;span style="color:#f92672">:&lt;/span> Person(n, a), school(s) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">display&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person&lt;span style="color:#f92672">::&lt;/span>display();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;School: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> school &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person person(&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> person.display();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//通过基类指针或引用调用派生类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Person &lt;span style="color:#f92672">*&lt;/span>p1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Person(&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person &lt;span style="color:#f92672">*&lt;/span>p2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Student(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p1&lt;span style="color:#f92672">-&amp;gt;&lt;/span>display();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p2&lt;span style="color:#f92672">-&amp;gt;&lt;/span>display();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;total population = &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> Person&lt;span style="color:#f92672">::&lt;/span>totalPopulation &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person&lt;span style="color:#f92672">::&lt;/span>displayTotalPopulation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">delete&lt;/span> p1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">delete&lt;/span> p2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>person;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> person.display();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> person&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> person.display();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> displayPerson(person);&lt;span style="color:#75715e">//友元函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//类模板允许你创建通用类，可以处理任何数据类型。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Stack&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> elements;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> push(&lt;span style="color:#66d9ef">const&lt;/span> T&lt;span style="color:#f92672">&amp;amp;&lt;/span> element) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elements.push_back(element);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T &lt;span style="color:#a6e22e">pop&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T elem &lt;span style="color:#f92672">=&lt;/span> elements.back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elements.pop_back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> elem;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> intStack;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> intStack.push(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> intStack.push(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> intStack.pop() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl; &lt;span style="color:#75715e">// 输出 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> intStack.pop() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl; &lt;span style="color:#75715e">// 输出 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>copy，move构造函数，&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Tools/</guid><description>&lt;h1 id="wsl">
 WSL
 &lt;a class="anchor" href="#wsl">#&lt;/a>
&lt;/h1>
&lt;h2 id="cmd">
 cmd
 &lt;a class="anchor" href="#cmd">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl -l -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --shutdown	&lt;span style="color:#75715e">#关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --list --verbose &lt;span style="color:#75715e"># 查看已安装的发行版、WSL 版本信息和当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --export Ubuntu-22.04 e:&lt;span style="color:#ae81ff">\U&lt;/span>buntu-22.04.tar#导出
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --unregister Ubuntu-22.04 &lt;span style="color:#75715e">#注销并卸载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --import Ubuntu-22.04 E:&lt;span style="color:#ae81ff">\u&lt;/span>buntu2204 E:&lt;span style="color:#ae81ff">\U&lt;/span>buntu-22.04.tar#导入
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="环境配置">
 环境配置
 &lt;a class="anchor" href="#%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>windows 设置打开： &lt;strong>适用于 Linux 的 Windows 子系统&lt;/strong> 和 &lt;strong>虚拟机平台&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240915093843416.png" alt="image-20240915093843416" />&lt;/p>
&lt;p>
 &lt;img src="https://pxgh02.github.io/image-20240915093856560.png" alt="image-20240915093856560" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Linux 内核更新包：https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl --list --verbose &lt;span style="color:#75715e"># 查看已安装的发行版、WSL 版本信息和当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --set-default &amp;lt;DistroName&amp;gt; &lt;span style="color:#75715e"># 重新指定默认发行版&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>
 &lt;a href="https://www.sysgeek.cn/install-wsl-2-windows/">Windows 11：WSL 2 安装和管理指南，3 种方法任你选 - 系统极客 (sysgeek.cn)&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://blog.csdn.net/cn_ljr/article/details/132047516">Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移_windows 11 wsl 修改安装位置-CSDN 博客&lt;/a>&lt;/p></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/window/</guid><description>&lt;h1 id="vscode">
 vscode
 &lt;a class="anchor" href="#vscode">#&lt;/a>
&lt;/h1>
&lt;h2 id="remote-ssh">
 remote-ssh
 &lt;a class="anchor" href="#remote-ssh">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>Host ISMC_Server_106
 HostName your.ip
 Port 22
 User pengxuan
&lt;/code>&lt;/pre>&lt;h1 id="系统重装">
 系统重装
 &lt;a class="anchor" href="#%e7%b3%bb%e7%bb%9f%e9%87%8d%e8%a3%85">#&lt;/a>
&lt;/h1>
&lt;h2 id="下载iso">
 下载ISO
 &lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bdiso">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://techpp.com/2024/09/02/windows-11-iso-download/">Windows 11 ISO Download – Official Direct Download Links - TechPP&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://next.itellyou.cn/Original/">原版软件 (itellyou.cn)&lt;/a>&lt;/p>
&lt;h2 id="制作pe">
 制作PE
 &lt;a class="anchor" href="#%e5%88%b6%e4%bd%9cpe">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://www.bilibili.com/video/BV1Ez421R7iY/?spm_id_from=333.337.search-card.all.click">纯净无广告，又强又趁手的维护工具，FirPE使用和DIY指南_哔哩哔哩_bilibili&lt;/a>&lt;/p>
&lt;p>FirPE:默认,全新制作&lt;/p>
&lt;h2 id="跳过联网">
 跳过联网
 &lt;a class="anchor" href="#%e8%b7%b3%e8%bf%87%e8%81%94%e7%bd%91">#&lt;/a>
&lt;/h2>
&lt;p>（Fn+）Shift+F10快捷键调出命令提示符窗口&lt;/p>
&lt;p>输入：OOBE\BYPASSNRO&lt;/p>
&lt;h2 id="windows激活office激活">
 windows激活&amp;amp;office激活
 &lt;a class="anchor" href="#windows%e6%bf%80%e6%b4%bboffice%e6%bf%80%e6%b4%bb">#&lt;/a>
&lt;/h2>
&lt;p>power shell 下打开输入&lt;code>irm win.zyqq.top | iex&lt;/code>,然后根据提示&lt;/p>
&lt;h2 id="初始化设置">
 初始化设置
 &lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e8%ae%be%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;p>使用dism++&lt;/p>
&lt;h2 id="系统备份及还原方法">
 系统备份及还原方法
 &lt;a class="anchor" href="#%e7%b3%bb%e7%bb%9f%e5%a4%87%e4%bb%bd%e5%8f%8a%e8%bf%98%e5%8e%9f%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://chongzhuang.163987.com/faq/17160.html">win11一键备份还原系统方法_系统之家一键重装系统官网 (163987.com)&lt;/a>&lt;/p>
&lt;h2 id="成为管理员">
 成为管理员
 &lt;a class="anchor" href="#%e6%88%90%e4%b8%ba%e7%ae%a1%e7%90%86%e5%91%98">#&lt;/a>
&lt;/h2>
&lt;h2 id="无法打开windowapps">
 无法打开WindowApps
 &lt;a class="anchor" href="#%e6%97%a0%e6%b3%95%e6%89%93%e5%bc%80windowapps">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://blog.csdn.net/VLOKL/article/details/140148337">【快速解决】WindowsApps拒绝访问的问题_windowsapps文件夹拒绝访问-CSDN博客&lt;/a>&lt;/p>
&lt;h2 id="win11家庭版升级为专业版">
 win11家庭版升级为专业版
 &lt;a class="anchor" href="#win11%e5%ae%b6%e5%ba%ad%e7%89%88%e5%8d%87%e7%ba%a7%e4%b8%ba%e4%b8%93%e4%b8%9a%e7%89%88">#&lt;/a>
&lt;/h2>
&lt;h1 id="cmd指令">
 cmd指令
 &lt;a class="anchor" href="#cmd%e6%8c%87%e4%bb%a4">#&lt;/a>
&lt;/h1>
&lt;pre tabindex="0">&lt;code>D: #进入d盘
cd ..
dir
&lt;/code>&lt;/pre></description></item><item><title/><link>https://pxgh02.github.io/zh/docs/Other/Writing-PPT-Presentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pxgh02.github.io/zh/docs/Other/Writing-PPT-Presentation/</guid><description>&lt;h1 id="main-points">
 Main Points
 &lt;a class="anchor" href="#main-points">#&lt;/a>
&lt;/h1>
&lt;ol>
&lt;li>某问题对推动科学发展或工程应用很重要，可通过多篇引用体现；&lt;/li>
&lt;li>现有方法有A、B、C，但它们存在一定缺点；&lt;/li>
&lt;li>本文提出一个新方法X。X是否第一次被提出？带来哪些影响？有无惊人结果？&lt;/li>
&lt;li>和现有方法相比，X在理论和实验中有更强的优势；&lt;/li>
&lt;li>X存在某弱点，我们计划在未来工作中如何改进。&lt;/li>
&lt;/ol>
&lt;h1 id="paper-structure">
 Paper Structure
 &lt;a class="anchor" href="#paper-structure">#&lt;/a>
&lt;/h1>
&lt;h2 id="title">
 Title
 &lt;a class="anchor" href="#title">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>⽤用⼀一句话概括你所做的⼯工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>考虑搜索引擎的影响，包含关键词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以适当地别出⼼心裁&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729171432560.png" alt="image-20240729171432560" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="abstract">
 Abstract
 &lt;a class="anchor" href="#abstract">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>概括&lt;/strong>[Main Points](#Main Points)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用语要简单，让外行能看懂&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免技术术语、数学公式、和技术细节&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不需要标注&lt;strong>引用&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要对工作的新颖性和影响力进行强调；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接在**”In this paper“**后面的一句最重要，它是对全文主要贡献的概括。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常用结构举例：&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729171808437.png" alt="image-20240729171808437" />&lt;/p>
&lt;p>
 &lt;img src="C:%5cUsers%5cPxmmmm.DESKTOP-G18CTQU%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20240729173951233.png" alt="Nature论文摘要模板" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>更详细地概括[Main Points](#Main Points)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>要点是充分论证你所做⼯工作的必要性和重要性， 要让审稿⼈人认同并迫不及待想往下看&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免技术术语、数学公式、和技术细节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应假定读者不了解本文研究的具体问题，且不知道该问题的相关工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>介绍为什么这是个重要的研究问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工作的创新点(3个及以上)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后一段通常是介绍论文的结构安排，举例&lt;/p>
&lt;pre tabindex="0">&lt;code>The rest of the paper is organized as follows. In Section 2, we discuss previous work on ... In Section 3, we describe ... In Section 4, we show ... In Section 5, we conclude the whole paper.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>突出本文贡献，举例：&lt;/p></description></item></channel></rss>